#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2011-2019, Camptocamp SA
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.


import sys
import re


def check_double_quote(string, filename, no, error):
    if string.find("___escaped_single_quote___") >= 0:
        print(
            "%s %i: A string quoted with double quote contains escaped single quote" %
            (filename, no)
        )
        return 1
    if string.find("'") == -1:
        print("%s %i: A string is quoted with double quote" % (filename, no))
        return 1

    return error


def check_quote(string, filename, no, error):
    if string.find("___escaped_double_quote___") >= 0:
        print(
            "%s %i: A string quoted with single quote contains escaped double quote" %
            (filename, no)
        )
        return 1
    if string.find("___escaped_single_quote___") >= 0 and string.find('"') == -1:
        print(
            "%s %i: A string with single quote is quoted with single quote" %
            (filename, no)
        )
        return 1

    return error


def check_line(line, filename, no, error):
    line = re.sub("\\\\\\\\", "___escape___", line)
    line = re.sub("\\\\'", "___escaped_single_quote___", line)
    line = re.sub('\\\\"', "___escaped_double_quote___", line)

    single_quote = line.find("'")
    double_quote = line.find('"')

    if single_quote == -1 and double_quote == -1:
        return error

    if single_quote == -1 or (double_quote != -1 and double_quote < single_quote):
        end = line.find('"', double_quote + 1)
        start = double_quote
        check = check_double_quote
    else:
        end = line.find("'", single_quote + 1)
        start = single_quote
        check = check_quote

    if end == -1:
        print("%s %i: Invalid string" % (filename, no))
        return 1
    error = check(line[start + 1:end], filename, no, error)
    error = check_line(line[end + 1:], filename, no, error)

    return error


def main():
    error = 0
    for filename in sys.argv[1:]:
        with open(filename) as f:
            triple_double_quote = False
            triple_quote = False
            end_with_quote = False
            end_with_double_quote = False
            end_with_escape = False
            last_line = ""
            last_line_no = 0
            for no, line in enumerate(f):
                if triple_double_quote:
                    if line.find('"""') != -1:
                        triple_double_quote = False
                        continue
                elif triple_quote:
                    if line.find("'''") != -1:
                        triple_quote = False
                        continue
                else:
                    if end_with_quote:
                        if line.strip().startswith("'"):
                            line = re.match(r"(.*)'( *\\)?", last_line).group(1) + \
                                re.match(" *'(.*)", line).group(1)
                            no = last_line_no
                        else:
                            error = check_line(last_line, filename, last_line_no + 1, error)
                            end_with_quote = False

                    if end_with_double_quote:
                        if line.strip().startswith('"'):
                            line = re.match(r'(.*)"( *\\)?', last_line).group(1) + \
                                re.match(' *"(.*)', line).group(1)
                            no = last_line_no
                        else:
                            error = check_line(last_line, filename, last_line_no + 1, error)
                            end_with_double_quote = False

                    if end_with_escape:
                        line = re.match(r'(.*)\\', last_line).group(1) + line
                        no = last_line_no

                    if line.find("#") >= 0:
                        line = line[0:line.find("#") + 1]

                    if line.find('"""') != -1:
                        if line.find('"""', line.find('"""') + 3) == -1:
                            triple_double_quote = True
                            continue
                        else:
                            continue

                    if line.find("'''") != -1:
                        print(
                            "%s %i: A string is quoted with triple single quote" %
                            (filename, no + 1)
                        )
                        error = 1
                        triple_quote = True
                        continue

                    end_with_quote = re.search(r"'( *\\)?$", line)
                    end_with_double_quote = re.search(r'"( *\\)?$', line)
                    end_with_escape = \
                        not (end_with_quote or end_with_double_quote) and \
                        re.search(r"\\$", line)
                    if end_with_quote or end_with_double_quote or end_with_escape:
                        last_line = line
                        last_line_no = no
                        continue

                    error = check_line(line, filename, no + 1, error)

    sys.exit(error)


if __name__ == "__main__":
    main()
