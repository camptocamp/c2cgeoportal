#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys

import requests
import yaml


REPOS = ('c2cgeoportal', 'ngeo')

with open('travis/changelog.yaml') as cl_file:
    changelog = yaml.load(cl_file, Loader=yaml.CSafeLoader)


def save():
    with open('travis/changelog.yaml', 'w') as cl_file_w:
        cl_file_w.write(yaml.dump(changelog, Dumper=yaml.CSafeDumper))


def get_any(repo, ref, section, url):
    if section not in changelog:
        changelog[section] = {}
    if repo not in changelog[section]:
        changelog[section][repo] = {}

    if ref in changelog[section][repo]:
        return False, changelog[section][repo][ref]

    json_stuff = requests.get(url.format(repo, ref), headers={
        'Accept': 'application/vnd.github.groot-preview+json',
        'Authorization': 'token {}'.format(os.environ['GITHUB_TOKEN'])
    }).json()

    changelog[section][repo][ref] = json_stuff
    return True, json_stuff


def get_commit(repo, ref):
    dirty, commit = get_any(repo, ref, 'commits', 'https://api.github.com/repos/camptocamp/{}/commits/{}')
    if 'sha' not in commit:
        print('Error on commit {}.'.format(ref))
        print(commit)
        sys.exit(1)
    print(commit['sha'])

    for key in list(commit.keys()):
        if key not in ('parents', 'sha'):
            del commit[key]
            dirty = True
    if commit['sha'] not in changelog['commits'][repo]:
        changelog['commits'][repo][commit['sha']] = commit
        dirty = True
    if dirty:
        save()
    return commit


def get_pulls(repo, ref):
    dirty, pulls = get_any(repo, ref, 'pulls', 'https://api.github.com/repos/camptocamp/{}/commits/{}/pulls')
    if type(pulls) != list:
        print('Error on commit {}.'.format(ref))
        print(pulls)
        sys.exit(1)
    for pull in pulls:
        if 'base' in pull:
            pull['base_ref'] = pull['base']['ref']
    print(pulls[0]['closed_at'])
    print(pulls[0]['base_ref'])

    for pull in pulls:
        for key in list(pull.keys()):
            if key not in (
                'number', 'title', 'number', 'closed_at', 'created_at', 'html_url', 'state',
                'updated_at', 'base_ref'
            ):
                del pull[key]
                dirty = True
    if dirty:
        save()
    return pulls


def add_new_release():
    if len(sys.argv) == 2:
        npm_list = json.loads(subprocess.check_output([
            'docker', 'run', '--rm', '--entrypoint=', 'camptocamp/geomapfish-build',
            'npm', 'list', '--global', '--json'
        ]))

        version = npm_list['dependencies']['ngeo']['version']
        match = re.match(
            r'([0-9]\.[0-9]\.[0-9])\-version\-[0-9]\.[0-9]\-latest\.[0-9]{8}T[0-9]{6}Z\.([0-9a-f]+)\.HEAD',
            version
        )

        c2cgeoportal_ref = subprocess.check_call([
            'git', 'log', 'pretty=format:%h', '--abbrev-commit', '-n1'
        ]).strip('\n ')

        changelog['release'].append({
            'ngeo': match.group(2),
            'c2cgeoportal': c2cgeoportal_ref,
            'name': sys.argv[1]
        })


def add_commit(commits, all_pulls, repo, ref):
    if ref in commits:
        return
    commit = get_commit(repo, ref)
    if commit['sha'] not in commits:
        pulls = get_pulls(repo, ref)
        for pull in pulls:
            all_pulls[pull['number']] = pull
        commits[commit['sha']] = True
        # Get only the first parent to don't go in the pull request
        add_commit(commits, all_pulls, repo, commit['parents'][0]['sha'])


def main():
    add_new_release()

    first = True
    release_pulls = {}
    commits = {}
    for repo in REPOS:
        commits[repo] = {}

    for release in changelog['releases']:
        if first:
            for repo in REPOS:
                commits[repo][get_commit(repo, release[repo])['sha']] = True
            first = False
            continue

        release_pulls[release['name']] = {}
        for repo in REPOS:
            release_pulls[release['name']][repo] = {}
            add_commit(
                commits[repo],
                release_pulls[release['name']][repo],
                repo, release[repo]
            )

    with open('CHANGELOG.md', 'wt') as md_file:
        for release, pulls in release_pulls.items()[::-1]:
            md_file.write('##### {}\n'.format(release))
            for repo in REPOS:
                for pull in pulls[repo].values():
                    if pull['base_ref'] != 'master':
                        md_file.write('* {} [{}#{}]({})\n'.format(
                            pull['title'], repo, pull['number'], pull['html_url']
                        ))


if __name__ == "__main__":
    main()
