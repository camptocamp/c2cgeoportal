#!/usr/bin/env python3

import os
import sys
import stat
import subprocess


for env in ['GROUP_ID', 'USER_ID', 'USER_NAME']:
    if env not in os.environ:
        exit('The {} environment variable is required'.format(env))

args = sys.argv[1:]

has_docker = os.path.exists('/var/run/docker.sock')
docker_group_id = os.stat('/var/run/docker.sock').st_gid if has_docker else -1

try:
    subprocess.check_call(['groupadd', '--gid=' + os.environ['GROUP_ID'], 'geomapfish'])
except subprocess.CalledProcessError:
    pass

if has_docker:
    try:
        subprocess.check_call(['groupdel', 'docker'])
        subprocess.check_call(['groupadd', '--gid={}'.format(docker_group_id), 'docker'])
    except subprocess.CalledProcessError:
        pass

try:
    subprocess.check_call([
        'useradd',
        '--groups=docker,sudo' if has_docker else '--groups=sudo',
        '--shell=/bin/bash',
        '--uid=' + os.environ['USER_ID'],
        '--gid=' + os.environ['GROUP_ID'],
        os.environ['USER_NAME'],
    ])
except subprocess.CalledProcessError:
    pass

if 'DOCKER_HOST_' in os.environ:
    with open('/etc/hosts', 'a') as f:
        f.write('\n{} docker-host\n'.format(os.environ['DOCKER_HOST_']))

# The home directory is required
if not os.path.exists('/home/' + os.environ['USER_NAME']):
    os.mkdir('/home/' + os.environ['USER_NAME'])
    os.chown(
        '/home/' + os.environ['USER_NAME'],
        int(os.environ['USER_ID']),
        int(os.environ['GROUP_ID']),
    )

# Be able to write in the build directory
os.chmod(
    "/build",
    stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR |
    stat.S_IRGRP | stat.S_IWGRP | stat.S_IXGRP |
    stat.S_IROTH | stat.S_IWOTH | stat.S_IXOTH
)

run_file_name = "/tmp/run"
with open(run_file_name, 'w') as run_file:
    run_file.write("""#!/usr/bin/env python3

import subprocess, os

{umask}

try:
    subprocess.check_call({args})
except subprocess.CalledProcessError as e:
    exit(e.returncode)
""".format(
        umask='os.umask(0o{})'.format(os.environ["UMASK"]) if "UMASK" in os.environ else "",
        args=repr(args)
    ))

os.chmod(
    run_file_name,
    stat.S_IRUSR | stat.S_IXUSR |
    stat.S_IRGRP | stat.S_IXGRP |
    stat.S_IROTH | stat.S_IXOTH
)

try:
    subprocess.check_call(["su", os.environ['USER_NAME'], "-c", run_file_name])
except subprocess.CalledProcessError as e:
    exit(e.returncode)
except KeyboardInterrupt:
    print("Interrupted...")
    exit(0)
