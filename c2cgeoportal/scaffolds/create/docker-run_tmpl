#!/usr/bin/env python3

import sys
import os
import subprocess
import netifaces
import distutils.sysconfig


def main():

    args = sys.argv[1:]
    docker_cmd = ['docker', 'run']

    root = False
    if args[0] == '--root':
        args = args[1:]
        root = True

    if args[0][0] == '-':
        docker_cmd.append(args[0])
        args = args[1:]

    dir_path = os.path.dirname(os.path.realpath(__file__))
    build_volume_name = dir_path[1:].replace("/", "-")

    docker_cmd.extend([
        "--rm",
        "--volume=/var/run/docker.sock:/var/run/docker.sock",
        "--volume={}:/build".format(build_volume_name),
        "--volume={pwd}:/src".format(pwd=os.getcwd()),
        "--volume={home}:{home}".format(home=os.environ["HOME"]),
        "--env=USER_NAME={}".format(os.getlogin()),
        "--env=USER_ID={}".format(os.getuid() if os.name == "posix" else 1000),
        "--env=GROUP_ID={}".format(os.getgid() if os.name == "posix" else 1000),
    ])

    for env in [
        "HOME",
        "TRAVIS",
        "TRAVIS_BRANCH",
        "TRAVIS_JOB_ID",
        "SRID",
        "EXTENT",
        "APACHE_VHOST",
    ]:
        docker_cmd.append("--env={}".format(env))

    docker_adrs = netifaces.ifaddresses('docker0')[2][0]['addr']
    docker_cmd.append("--env=DOCKER_HOST_={}".format(docker_adrs))
    docker_cmd.append("--env=BUILD_VOLUME_NAME={}".format(build_volume_name))
    docker_cmd.append("--env=PROJECT_DIRECTORY={}".format(os.getcwd()))
    docker_cmd.append("--env=PYTHON_PATH={}".format(
        os.path.join(
            os.getcwd(),
            ".build/venv/lib/python{}.{}/site-packages".format(
                sys.version_info.major,
                sys.version_info.minor,
            )
        )
    ))
    git_hash = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode("utf-8").strip()
    docker_cmd.append("--env=GIT_HASH={}".format(git_hash))

    if root:
        docker_cmd.extend(["--entrypoint", args[0]])
        args = args[1:]

    docker_cmd.append("camptocamp/geomapfish-build:{{geomapfish_version}}")
    docker_cmd.extend(args)
    try:
        subprocess.check_call(docker_cmd)
    except subprocess.CalledProcessError:
        exit(2)


if __name__ == "__main__":
    main()
