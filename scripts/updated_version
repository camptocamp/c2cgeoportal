#!/usr/bin/env python3

# Copyright (c) 2021, Camptocamp SA
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

import argparse
import json
import subprocess
from typing import Any, Dict, List, Tuple


def output(cmd: List[str]) -> bytes:
    try:
        return subprocess.check_output(cmd)
    except subprocess.CalledProcessError as error:
        assert error.output is not None
        return error.output


def get_versions(
    version: str, old_version: float
) -> Tuple[List[Tuple[str, str]], Dict[str, str], Dict[str, str]]:
    deb_versions = {
        e.split("==")[0]: e.split("==")[1]
        for e in subprocess.check_output(
            [
                "docker",
                "run",
                "--rm",
                "--entrypoint=",
                f"camptocamp/geomapfish-tools:{version}",
                "dpkg-query",
                "--show",
                "-f",
                "${binary:Package}==${Version}\n",
            ]
        )
        .decode()
        .strip()
        .split("\n")
    }

    major_versions = [
        (
            "Ubuntu",
            subprocess.check_output(
                [
                    "docker",
                    "run",
                    "--rm",
                    "--entrypoint=",
                    f"camptocamp/geomapfish:{version}",
                    "cat",
                    "/etc/issue",
                ]
            )
            .decode()
            .strip()
            .split(" ")[1],
        ),
        (
            "Python",
            subprocess.check_output(
                [
                    "docker",
                    "run",
                    "--rm",
                    "--entrypoint=",
                    f"camptocamp/geomapfish:{version}",
                    "python3",
                    "--version",
                ]
            )
            .decode()
            .strip()
            .split(" ")[1],
        ),
        (
            "Node",
            subprocess.check_output(
                [
                    "docker",
                    "run",
                    "--rm",
                    "--entrypoint=",
                    f"camptocamp/geomapfish-tools:{version}",
                    "node",
                    "--version",
                ]
            )
            .decode()
            .strip()
            .strip("v"),
        ),
        (
            "Npm",
            subprocess.check_output(
                [
                    "docker",
                    "run",
                    "--rm",
                    "--entrypoint=",
                    f"camptocamp/geomapfish-tools:{version}",
                    "npm",
                    "--version",
                ]
            )
            .decode()
            .strip(),
        ),
        ("Postgres", deb_versions["postgresql-client"]),
    ]

    if old_version >= 2.6:
        major_versions += (
            (
                "GDAL",
                subprocess.check_output(
                    [
                        "docker",
                        "run",
                        "--rm",
                        "--entrypoint=",
                        f"camptocamp/geomapfish:{version}",
                        "gdalinfo",
                        "--version",
                    ]
                )
                .decode()
                .strip()
                .split(" ")[1],
            ),
            (
                "Proj",
                subprocess.check_output(
                    [
                        "docker",
                        "run",
                        "--rm",
                        "--entrypoint=",
                        f"camptocamp/geomapfish:{version}",
                        "pkg-config",
                        "--modversion",
                        "proj",
                    ]
                )
                .decode()
                .strip(),
            ),
        )
    return (
        major_versions,
        {
            e.split("==")[0]: e.split("==")[1]
            for e in subprocess.check_output(
                [
                    "docker",
                    "run",
                    "--rm",
                    "--entrypoint=",
                    f"camptocamp/geomapfish:{version}",
                    "python3",
                    "-m",
                    "pip",
                    "freeze",
                ]
            )
            .decode()
            .split("\n")
            if e and len(e.split("==")) == 2 and e[0] not in ("#", "-")
        },
        {
            e: v["version"]
            for e, v in json.loads(
                output(
                    [
                        "docker",
                        "run",
                        "--rm",
                        "--entrypoint=",
                        f"camptocamp/geomapfish-tools:{version}",
                        "npm",
                        "list",
                        "--global",
                        "--json",
                        "--depth=0",
                    ]
                )
            )["dependencies"].items()
            if "version" in v and e != "ngeo"
        },
    )


def print_package_update(package_old: Dict[str, str], package_new: Dict[str, str]) -> None:

    print("New packages:")
    for name, version in package_new.items():
        if name not in package_old:
            print(f"* {name} at version {version}")

    print()
    print("Removed packages:")
    for name, version in package_old.items():
        if name not in package_new:
            print(f"* {name}")

    print()
    print("Major updates:")
    for name, version in package_new.items():
        if name in package_old:
            if version.split(".")[0] != package_old[name].split(".")[0]:
                print(f"* {name} from {package_old[name]} to {version}")

    print()
    print("Minor updates:")
    for name, version in package_new.items():
        if name in package_old:
            if (
                version.split(".")[0] == package_old[name].split(".")[0]
                and version.split(".")[1] != package_old[name].split(".")[1]
            ):
                print(f"* {name} from {package_old[name]} to {version}")


def main() -> None:
    parser = argparse.ArgumentParser(description="Get the upgraded version.")
    parser.add_argument("old_version", metavar="OLD", help="The old GeoMapFish version")
    parser.add_argument("new_version", metavar="NEW", help="The new GeoMapFish version")
    args = parser.parse_args()

    old_major_version = float(args.old_version[:3])
    main_old, python_old, npm_old = get_versions(args.old_version, old_major_version)
    main_new, python_new, npm_new = get_versions(args.new_version, old_major_version)

    print("Main version update")
    print("-------------------")
    for major_old, major_new in zip(main_old, main_new):
        # if major_old[1] != major_new[1]:
        print(f"{major_old[0]} is updated from {major_old[1]} to {major_new[1]}")

    print()
    print("Python package update")
    print("---------------------")

    print_package_update(python_old, python_new)

    print()
    print("Npm package update")
    print("------------------")

    print_package_update(npm_old, npm_new)


if __name__ == "__main__":
    main()
