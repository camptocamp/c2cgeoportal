#!/usr/bin/env python3

# Copyright (c) 2019-2020, Camptocamp SA
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.


import argparse
import os
import platform
import re
import subprocess
import sys

parser = argparse.ArgumentParser(description="Upgrade the project")
parser.add_argument(
    "--debug", help="Path to c2cgeoportal source folder to be able to debug the upgrade procedure"
)
parser.add_argument("version", help="the version to upgrade to (master or x.y.z)")
parser.add_argument("step", nargs="?", help="the step to run")
parser_finalize = argparse.ArgumentParser(description="Upgrade the project", add_help=False)
parser_finalize.add_argument("--finalize", action="store_true", help="finalize the upgrade")
parser_finalize.add_argument("--help", action="help", help="show this help message and exit")
parser_finalize.add_argument("build_arg", nargs="*", help="build arguments")

if len(sys.argv) >= 2 and sys.argv[1] == "--finalize":
    args = parser_finalize.parse_args()

    if platform.system() == "Windows":
        code = subprocess.call(["python", "build"] + args.build_arg)
    else:
        code = subprocess.call(["./build"] + args.build_arg)
    if code != 0:
        sys.exit(code)

    subprocess.call(["docker-compose", "down", "--remove-orphans"])
    subprocess.call(
        ["docker-compose", "pull", "--ignore-pull-failures"], env={**os.environ, "DOCKER_TAG": "unexisting"}
    )
    subprocess.check_call(["docker-compose", "up", "-d"])
    subprocess.check_call(
        [
            "docker-compose",
            "exec",
            "geoportal",
            "alembic",
            "--name=main",
            "--config=alembic.ini",
            "upgrade",
            "head",
        ]
    )

else:
    args = parser.parse_args()

    c2cupgrade_args = ["--step", args.step] if args.step is not None else []

    if os.environ.get("CI") != "true" and args.step is None:
        major_version = args.version
        match = re.match(r"^([0-9]+\.[0-9]+)\.[0-9]+$", args.version)
        if match is not None:
            major_version = match.group(1)
        match = re.match(r"^([0-9]+\.[0-9]+)\.[0-9]+\.[0-9]+$", args.version)
        if match is not None:
            major_version = match.group(1)
        if not args.debug:
            subprocess.check_call(["docker", "pull", "camptocamp/geomapfish:{}".format(major_version)])
            subprocess.check_call(["docker", "pull", "camptocamp/geomapfish-tools:{}".format(args.version)])
            subprocess.check_call(["docker", "pull", "camptocamp/geomapfish-config:{}".format(args.version)])

    debug_volumes = []
    if args.debug:
        debug_volumes = [
            "--volume={}/../c2cgeoportal/geoportal/c2cgeoportal_geoportal/scripts/c2cupgrade.py:/opt/c2cgeoportal/geoportal/c2cgeoportal_geoportal/scripts/c2cupgrade.py".format(
                os.getcwd()
            ),
        ]

    win = platform.system() == "Windows"
    sys.exit(
        subprocess.call(
            [
                "docker",
                "run",
                "--rm",
                "--env=CI",
                "--volume={}:/src".format(os.getcwd()),
            ]
            + debug_volumes
            + [
                "camptocamp/geomapfish-tools:{}".format(args.version),
                "run-git",
                subprocess.check_output(["git", "config", "--get", "user.name"]).decode().strip(),
                subprocess.check_output(["git", "config", "--get", "user.email"]).decode().strip(),
                "" if win else subprocess.check_output(["id", "-u"]).decode().strip(),
                "" if win else subprocess.check_output(["id", "-g"]).decode().strip(),
                "/src",
                "c2cupgrade",
            ]
            + c2cupgrade_args
        )
    )
