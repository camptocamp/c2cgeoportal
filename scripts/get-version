#!/usr/bin/env python3

# Copyright (c) 2018-2023, Camptocamp SA
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.


import argparse
import os
import re
import subprocess
import sys

import requests
import yaml

parser = argparse.ArgumentParser(description="Get and upgrade the minor version.")
parser.add_argument("--auto-increment", action="store_true")
parser.add_argument("--force-increment", action="store_true")
parser.add_argument("--full", action="store_true")
parser.add_argument("--major", action="store_true")
parser.add_argument("--major-minor", action="store_true")
parser.add_argument("--github", action="store_true")
args = parser.parse_args()

with open("ci/ci.yaml") as ci_file:
    ci = yaml.safe_load(ci_file.read())

tag = None
match = re.match(r"refs/tags/([0-9]+\.[0-9]+\.[0-9]+)$", os.environ.get("GITHUB_REF", "dev"))
if match is not None:
    tag = match.group(1)
if args.force_increment:
    ci["minor"] = ci["minor"] + 1
    with open("ci/ci.yaml", "w") as ci_file:
        ci_file.write(yaml.dump(ci, default_flow_style=False, explicit_start=True))
elif args.auto_increment:
    if tag is not None:
        ci["minor"] = 0
    elif os.environ.get("MAIN_BRANCH", "master") != "master" and (
        os.environ.get("GITHUB_REF", "") == "refs/heads/" + os.environ.get("MAIN_BRANCH", "master")
        or os.environ.get("GITHUB_EVENT_NAME", "") == "repository_dispatch"
    ):
        ci["minor"] = ci["minor"] + 1

    with open("ci/ci.yaml", "w") as ci_file:
        ci_file.write(yaml.dump(ci, default_flow_style=False, explicit_start=True))

minor = str(ci["minor"])

last_tag = subprocess.check_output(["git", "describe", "--abbrev=0", "--tags"]).decode().strip()
major_minor = last_tag
main_branch = os.environ.get("MAIN_BRANCH", "master")
major_version = os.environ.get("MAJOR_VERSION", "2.8")
patch = ""
if tag:
    patch = tag
    full = tag + ".0"
elif last_tag.startswith(major_version):
    patch = last_tag
    full = last_tag + "." + minor
elif main_branch == "master":
    full = major_version
else:
    full = major_version + ".rc." + minor
major = major_version

if args.major:
    print(major)
    sys.exit(0)
if args.major_minor:
    print(major_minor)
    sys.exit(0)
if args.full:
    print(full)
    sys.exit(0)

import c2cciutils

latest = False
security_response = requests.get(
    "https://raw.githubusercontent.com/c2cgeoportal/master/SECURITY.md",
    headers=c2cciutils.add_authorization_header({}),
    timeout=30,
)
with open("ci/config.yaml", encoding="utf-8") as open_file:
    config = yaml.load(open_file, Loader=yaml.SafeLoader)
docker_config = config.get("publish", {}).get("docker", {})

if (
    security_response.ok
    and docker_config.get("latest", c2cciutils.configuration.PUBLISH_DOCKER_LATEST_DEFAULT) is True
):
    security = c2cciutils.security.Security(security_response.text)
    version_index = security.headers.index("Version")
    latest = security.data[-1][version_index] == major_version

versions = []
if last_tag.startswith(major_version):
    versions.append(major_version)

snyk_version = ""
upgrade_version = ""
if os.environ.get("GITHUB_WORKFLOW", "").startswith("Rebuild"):
    branch = main_branch
    versions = [major_version]
    snyk_version = major_version
else:
    if os.environ.get("GITHUB_REF", "").startswith("refs/heads/"):
        branch = os.environ["GITHUB_REF"][11:]
        if branch == "master":
            versions = [major_version, "master"]
            snyk_version = major_version
            upgrade_version = "master"
        elif branch == main_branch:
            versions = [major_version, full]
            if patch:
                versions.append(patch)
            if latest:
                versions.append("latest")
            snyk_version = major_version
            upgrade_version = full
        elif "/" not in branch:
            versions = [branch]
    if os.environ.get("GITHUB_REF", "").startswith("refs/pull/"):
        pull_request = os.environ["GITHUB_REF"][10:-6]
        versions = [pull_request]

print("full: {full}".format(full=full))
print("major: {major}".format(major=major))
print("major_minor: {major_minor}".format(major_minor=major_minor))
print("minor: {minor}".format(minor=minor))
print("upgrade_version: {upgrade_version}".format(upgrade_version=upgrade_version))
print("versions: {versions}".format(versions=",".join(versions)))
print("snyk_version: {snyk_version}".format(snyk_version=snyk_version))
if args.github:
    with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as output_file:
        output_file.write("full={full}\n".format(full=full))
        output_file.write("major={major}\n".format(major=major))
        output_file.write("major_minor={major_minor}\n".format(major_minor=major_minor))
        output_file.write("minor={minor}\n".format(minor=minor))
        output_file.write("upgrade_version={upgrade_version}\n".format(upgrade_version=upgrade_version))
        output_file.write("versions={versions}\n".format(versions=",".join(versions)))
        output_file.write("snyk_version={snyk_version}\n".format(snyk_version=snyk_version))
