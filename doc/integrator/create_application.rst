.. _integrator_create_application:

Create a new application
========================

Creating a c2cgeoportal application is done by applying two Paste skeletons
(a.k.a. templates). These skeletons are provided by the ``c2cgeoportal``
package. So to be able to create a c2cgeoportal application the
``c2cgeoportal`` package must be installed.

Install c2cgeoportal
--------------------

Installing c2cgeoportal is done using Buildout.

Clone c2cgeoportal::

    $ git clone git@github.com:camptocamp/c2cgeoportal.git
    $ cd c2cgeoportal ; git submodule update --init

Boostrap Buildout::

    $ python bootstrap.py --version 1.5.2 --distribute --download-base \
        http://pypi.camptocamp.net/distribute-0.6.22_fix-issue-227/ --setup-source \
        http://pypi.camptocamp.net/distribute-0.6.22_fix-issue-227/distribute_setup.py

Install c2cgeoportal::

    $ ./buildout/bin/buildout

The above command downloads the latest *final* ``c2cgeoportal`` package from
http://pypi.camptocamp.net/internal-pypi/index/.

.. note::

    To install a development package of c2cgeoportal you can edit buildout.cfg
    and set ``prefer-final`` to ``false``.

For the rest of the procedure activate the Buildout Python environment
using this::

    $ source buildout/bin/activate

Your shell prompt should have changed to something like this::

    (c2cgeoportal) $

From now on the ``buildout/bin`` directory is in your shell PATH and
every command from ``buildout/bin`` is directly accessible from your
shell.

With ``c2cgeoportal`` 0.7 and higher try the following::

    (c2cgeoportal) $ pcreate -l

And with ``c2cgeoportal`` 0.6 and lower::

    (c2cgeoportal) $ paster create --list-templates


Create the new application
--------------------------

Keep the Python env activated and change to a directory where you want to
create the application (can be anywhere really, ``/tmp`` for example).

To create the application first apply the ``c2cgeoportal_create`` skeleton.

With ``c2cgeoportal`` 0.7 and higher use::

    (c2cgeoportal) $ pcreate -s c2cgeoportal_create <project_name>

With ``c2cgeoportal`` 0.6 and lower use::

    (c2cgeoportal) $ paster create --template=c2cgeoportal_create <project_name>

Replace ``<project_name>`` with a project name of your choice. The camel case
notation is typically used for the project name. You'll be asked to enter the
SRID for this project.

.. note::

    You can use::
    
        pcreate -s c2cgeoportal_create <project_name> package=<package_name>

    if you need a specific name for the Python package defined by the project.

Now apply the ``c2cgeoportal_update`` skeleton. 

With ``c2cgeoportal`` 0.7 and higher use::

    (c2cgeoportal) $ pcreate -s c2cgeoportal_update <project_name>

With ``c2cgeoportal`` 0.6 and lower use::

    (c2cgeoportal) $ paster create --template=c2cgeoportal_update <project_name>

Replace ``<project_name>`` with the project name used previously for
``c2cgeoportal_create``.

.. note::

    The ``c2cgeoportal_update`` scaffold is also used to update the
    application. The files generated by this skeleton are prefixed with
    ``CONST_``, which means they are *constant* files that should not changed.
    Following this rule is important for easing updates.

At this point you can deactivate the Python env::

    (c2cgeoportal) $ deactivate

Remove the ``egg-info`` directory, as it shouldn't be added to the
application's source repository::

    $ rm -rf <project_name>/*.egg-info

If this application is not part of a parent/child architecture, or is
a ``parent`` application, you can just remove the ``buildout_child.cfg`` file::

    $ rm buildout_child.cfg

If this application is a ``child`` application make ``buildout_child.cfg`` the
main Buildout configuration file::

    $ rm buildout.cfg
    $ mv buildout_child.cfg buildout.cfg

.. note::

    In a parent/child architecture one instance of the application is the
    parent, the others are children. Child instances display layers
    served by the parent instance. Parent and child instances share
    the same database, but use dedicated schemas within that database.

Put the application under revision control
------------------------------------------

Now is a good time to put the application source code under revision
control (Git preferably)::

    git init
    git add <project>/ .gitignore .httpauth CONST_CHANGELOG.txt 
            CONST_TIPS.txt.in CONST_buildout.cfg apache/ bootstrap.py
            buildout.cfg buildout/ buildout_sbrunner.cfg deploy/ 
            development.ini.in jsbuild/ mapserver/ print/
            production.ini.in setup.cfg setup.py tilecache/
    git commit -m "initial commit"
    git remote add origin git@git.camptocamp.com:/srv/git/<project>
    git push origin master

Define the CGXP submodule
~~~~~~~~~~~~~~~~~~~~~~~~~

Add the CGXP submodule::

    git submodule add https://github.com/camptocamp/cgxp.git <project>/static/lib/cgxp
    git submodule foreach git submodule update --init
 
.. note::

   We use the http URL to allow everybody to clone.


Configure the application
-------------------------

Edit the ``buildout.cfg`` file to configure the application, especially the
'to_be_defined' values.

After creation and minimal setup the application is ready to be installed.
See the next section :ref:`integrator_install_application`.

.. Minimal setup of the application
.. --------------------------------

.. This section provides the minimal set of things to do to get a working
.. application.

.. Defining background layers
.. --------------------------

.. A c2cgeoportal application has *background layers* and *overlays*. Background
.. layers, also known as base layers, sit at the bottom of the map. They're
.. typically cached layers. Overlays represent application-specific data. They're
.. displayed on top of background layers.

.. Background layers are created by the application integrator, while overlays are
.. created by the application administrator. This is why only background layers
.. are covered here in the Integrator Guide. Defining overlays is described in the
.. :ref:`administrator_guide`.

.. Create a WMTS layer (**To Be Changed**)

.. * Make sure that ``/var/sig/tilecache/`` exists and is writeable by the user ``www-data``.
.. * Add the matching layers definitions in the mapfile (``mapserver/c2cgeoportal.map.in``).
.. * Add a layer entry in ``tilecache/tilecache.cfg.in``. The ``layers`` attribute 
..   must contain the list of mapserver layers defined above.
.. * Update the layers list in the ``<package>/templates/viewer.js`` template. 
..   The ``layer`` parameter is the name 
..   of the tilecache layer entry just added in ``tilecache/tilecache.cfg.in``.

.. **To Be Completed**
