.. _integrator_create_application:

Create a new application
========================

Creating a c2cgeoportal application is done by applying two Paste skeletons
(a.k.a. templates). These skeletons are provided by the ``c2cgeoportal``
package. So to be able to create a c2cgeoportal application the
``c2cgeoportal`` package must be installed.

This guide considers that:
 - We use a server manages by Camptocamp, meaning:
    - all dependencies described in the 
      :ref:`system requirements <integrator_install_application_system_requirement>` 
      section are installed
    - Postgres has a gis template 'template_posgis' and a user 'www-data'
    - Apache use the user 'www-data'
 - We use Git as revision control
 - We use a version of ``c2cgeoportal`` >= 0.7

For the others systems there are some inline notes to help with the process.

Another thing you should have is a working main application,
see: :ref:`integrator_install_application`

Organisation of a project
-------------------------

This is a proposition to organise a project with sub-projects in the
revision control::

    <root>
      ├─ <main_project>
      ├─ <first_sub_project>
      ├─ <second_sub_project>
      └─ ...

where ``<root>`` is root folder of the revision control.

.. note::

    In a parent/child architecture one instance of the application is the
    parent, the others are children. Child instances display layers
    served by the parent instance. Parent and child instances share
    the same database, but use dedicated schemas within that database.

.. note::

    If you don't plan to have more than one subproject you can directly
    add it at the root directory of the revision control.

List existing templates
-----------------------

To list the available template you can use the following command
from the ``main_project`` folder::

    ./buildout/bin/pcreate -l

You should have at least the following templates:

* c2cgeoportal_create
* c2cgeoportal_update

.. note::

    With ``c2cgeoportal`` 0.6 and lower use::

        ./buildout/bin/paster create --list-templates

Create the new application
--------------------------

To simplify the rest of the tutorial we set the new project name in a
bash variable::

    PROJECT=<project_name>

Replace ``<project_name>`` with a project name of your choice.
The project name can be CamelCase but lower case is recommended.

Create the application skeleton
...............................

To create the application first apply the ``c2cgeoportal_create`` skeleton::

    ./buildout/bin/pcreate -s c2cgeoportal_create ../$PROJECT

You'll be asked to enter the SRID for this project.

.. note::

   With ``c2cgeoportal`` 0.6 and lower use::

       ./buildout/bin/paster create --template=c2cgeoportal_create --output-dir=.. $PROJECT

.. note::

    If you need a specific name for the Python package defined by the project
    you can use::

        pcreate -s c2cgeoportal_create <project_name> package=<package_name>


Now apply the ``c2cgeoportal_update`` skeleton::

    ./buildout/bin/pcreate -s c2cgeoportal_update ../$PROJECT

The ``c2cgeoportal_update`` scaffold is also used to update the
application. The files generated by this skeleton are prefixed with
``CONST_``, which means they are *constant* files that should not be changed.
Following this rule is important for easier updates.

.. note::

    With ``c2cgeoportal`` 0.6 and lower use::

        ./buildout/bin/paster create --template=c2cgeoportal_update --output-dir=.. $PROJECT

.. note::

   If the project provides an additional template it can be applied now::

        ./buildout/bin/pcreate --overwrite -s <project_template> ../$PROJECT

Remove the ``egg-info`` directory, as it shouldn't be added to the
application's source repository::

    cd ../$PROJECT
    rm -rf *.egg-info

If this application is not part of a parent/child architecture, or is
a ``parent`` application, you can just remove the ``buildout_child.cfg`` file::

    rm buildout_child.cfg

If this application is a ``child`` application make ``buildout_child.cfg`` the
main Buildout configuration file::

    rm buildout.cfg
    mv buildout_child.cfg buildout.cfg


Put the application under revision control
------------------------------------------

Now is a good time to put the application source code under revision
control (Git preferably).

.. note::

   We use the http URL to allow everybody to clone.

To add a new child in an existing repository
............................................

Add the project::

    cd ..
    git add $PROJECT/

Add the CGXP submodule::

    git submodule add https://github.com/camptocamp/cgxp.git $PROJECT/$PROJECT/static/lib/cgxp
    git submodule foreach git submodule update --init

Commit and push on the main repository::

    git commit -m "initial commit of $PROJECT"
    git push origin master

To add a project in a new repository
....................................

Add the project::

    git init
    git add $PROJECT/ .gitignore .httpauth
            CONST_CHANGELOG.txt CONST_TIPS.txt.in
            CONST_buildout.cfg buildout.cfg buildout/
            bootstrap.py setup.cfg setup.py
            development.ini.in production.ini.in
            jsbuild/ print/ apache/
            mapserver/ tilecache/ deploy/
    git remote add origin git@git.camptocamp.com:/srv/git/$PROJECT

Add the CGXP submodule::

    git submodule add https://github.com/camptocamp/cgxp.git $PROJECT/static/lib/cgxp
    git submodule foreach git submodule update --init

Commit and push on the main repository::

    git commit -m "initial commit"
    git push origin master

Configure the application
-------------------------

Edit the ``buildout.cfg`` file to configure the application, especially the
'to_be_defined' values.

Don't miss to add your changes to git::

    git add buildout.cfg
    git commit -m "initialise buildout.cfg"
    git push origin master

After creation and minimal setup the application is ready to be installed.
Then follow the sections in the install application guide:

* :ref:`integrator_install_application_create_schema`.
* :ref:`integrator_install_application_install_application`.

.. note::
    If you create the main instance you should do the whole
    database creation as described in :ref:`integrator_install_application`.


.. Minimal setup of the application
.. --------------------------------

.. This section provides the minimal set of things to do to get a working
.. application.

.. Defining background layers
.. --------------------------

.. A c2cgeoportal application has *background layers* and *overlays*. Background
.. layers, also known as base layers, sit at the bottom of the map. They're
.. typically cached layers. Overlays represent application-specific data. They're
.. displayed on top of background layers.

.. Background layers are created by the application integrator, while overlays are
.. created by the application administrator. This is why only background layers
.. are covered here in the Integrator Guide. Defining overlays is described in the
.. :ref:`administrator_guide`.

.. Create a WMTS layer (**To Be Changed**)

.. * Make sure that ``/var/sig/tilecache/`` exists and is writeable by the user ``www-data``.
.. * Add the matching layers definitions in the mapfile (``mapserver/c2cgeoportal.map.in``).
.. * Add a layer entry in ``tilecache/tilecache.cfg.in``. The ``layers`` attribute
..   must contain the list of mapserver layers defined above.
.. * Update the layers list in the ``<package>/templates/viewer.js`` template.
..   The ``layer`` parameter is the name
..   of the tilecache layer entry just added in ``tilecache/tilecache.cfg.in``.

.. **To Be Completed**
