<tal:comment replace="nothing">
The MIT License (MIT)

Copyright (c) Camptocamp SA

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</tal:comment>

<?python import json ?>
<div tal:define="item_tmpl item_template|field.widget.item_template;
                 oid oid|field.oid;
                 name name|field.name;
                 min_len min_len|field.widget.min_len;
                 min_len min_len or 0;
                 max_len max_len|field.widget.max_len;
                 max_len max_len or 100000;
                 now_len len(subfields);
                 orderable orderable|field.widget.orderable;
                 orderable orderable and 1 or 0;
                 child_input_name child_input_name|field.widget.child_input_name;
                 prototype field.widget.prototype(field);
                 title title|field.title;"
     class="deform-seq item-${field.schema.name}"
     id="${oid}">

  <style>
    body.dragging, body.dragging * {
      cursor: move !important;
    }

    .dragged {
      position: absolute;
      opacity: 0.5;
      z-index: 2000;
    }
  </style>

  <!-- sequence -->
  <input type="hidden" name="__start__"
         value="${field.name}:sequence"
         class="deform-proto"
         tal:attributes="prototype prototype;
                         attributes|field.widget.attributes|{};"/>

  <div class="panel panel-default">
    <div class="panel-heading">${title}</div>
    <div class="panel-body">

      <div class="deform-seq-container"
           id="${oid}-orderable">
        <div tal:define="subfields [ x[1] for x in subfields ]"
             tal:repeat="subfield subfields"
             tal:replace="structure subfield.render_template(item_tmpl,
                                                          parent=field)" />
        <span class="deform-insert-before"
              tal:attributes="
                 min_len min_len;
                 max_len max_len;
                 now_len now_len;
                 orderable orderable;"></span>
      </div>

    </div>

    <div class="panel-footer">
      <div
        class="magicsuggest"
        tal:condition="field.widget.add_subitem"
      ></div>

      <script type="text/javascript">
       deform.addCallback(
         '${field.oid}',
         function(oid) {
           oid_node = $('#'+ oid);
           deform.processSequenceButtons(oid_node, ${min_len},
                                         ${max_len}, ${now_len},
                                         ${orderable});

           var ms = $('#'+ oid + ' .magicsuggest').magicSuggest({
             data: ${ structure: json.dumps(candidates, indent=4, separators=(',', ': ')) },
             renderer: function(data) {
               return '<span class="glyphicon ' + data.icon_class + '"></span> ' + data.label;
             },
             valueField: 'id',
             displayField: 'label',
             groupBy: 'group',
             allowFreeEntries: false,
             maxDropHeight: 500
           });

           $(ms).on('selectionchange', function(e, m) {
             this.getSelection().forEach(function(selecteditem) {

               // Search for the corresponding item in sequence
               var $el = $('#'+ oid).find('.deform-seq-item input[name="${child_input_name}"][value="' + selecteditem.id + '"]');

               // If item is already sequence, flash it to the user
               if ($el.length > 0) {
                 for (var i=0; i<3; i++) {
                   $el.closest('.deform-seq-item').
                     fadeOut(100).
                     fadeIn(100)
                 }
               }
               else {
                 // Add item in sequence
                 deform.appendSequenceItem('#'+ oid);

                 // Set title and treeitem_id
                 var $itemnode = $('#'+ oid).find('.deform-insert-before').last().prev();
                 $itemnode.find('.well').html(
                     '<span class="glyphicon ' + selecteditem.icon_class + '"></span> ' +
                     selecteditem.label +
                     ' <a href="' + selecteditem.edit_url + '">' +
                       '<span class="glyphicon glyphicon-pencil"></span>' +
                     '</a>'
                 );
                 $itemnode.find('input[name="${child_input_name}"]').val(selecteditem.id);
               }
             });
             this.removeFromSelection(this.getSelection(), true);
           });
         }
       )
         <tal:block condition="orderable">
             $( "#${oid}-orderable" ).sortable({
               handle: ".deform-order-button, .panel-heading, .orderable-item",
               containerSelector: "#${oid}-orderable",
               itemSelector: ".deform-seq-item",
               placeholder: '<span class="glyphicon glyphicon-arrow-right placeholder"></span>',
               onDragStart: function ($item, container, _super) {
                 var offset = $item.offset(),
                 pointer = container.rootGroup.pointer

                 adjustment = {
                   left: pointer.left - offset.left,
                   top: pointer.top - offset.top
                 }

                 _super($item, container)
               },
               onDrag: function ($item, position) {
                   $item.css({
                     left: position.left - adjustment.left,
                     top: position.top - adjustment.top
                   })
                 }
               });
         </tal:block>
      </script>

      <input type="hidden" name="__end__" value="${field.name}:sequence"/>
      <!-- /sequence -->
    </div>

  </div>
</div>
