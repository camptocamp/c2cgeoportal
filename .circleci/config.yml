---
version: 2.1
jobs:
  main:
    environment: &environment
      MAIN_BRANCH: master
      MAJOR_VERSION: 2.5
      CI: true
      PATH: /usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/home/circleci/.local/bin
    docker:
      - image: circleci/python:3.7
    steps:
      # Versions
      - run: docker --version
      - run: docker-compose --version
      - run: git --version
      - run: python --version
      - run: python -m pip --version

      - checkout
      - setup_remote_docker
      # - setup_remote_docker:
      #     docker_layer_caching: true

      # Global simple lint
      - run:
          command: git --no-pager diff --check a6eacf93706d94606fb3c68a671f8254aea48e3b
          when: always
      - run:
          command: python ci/test-eof-newline
          when: always
      - run:
          command: python -m pip install --user --requirement=ci/requirements.txt
          when: always
      - run:
          command: >
            codespell --quiet-level=2 --check-filenames --ignore-words=spell-ignore-words.txt \
            $(find -name .git -prune -print)
          when: always
      - run:
          command: >
            yamllint --strict --config-file=yamllint.yaml -s
            $(find -name .git -prune  -or -name changelog.yaml -prune -or
            \( -name "*.yml" -or -name "*.yaml" \) -print)
          when: always

      # Build images
      - run: VERSION=$(ci/release-tag) make build-runner
      - run: VERSION=$(ci/release-tag) make build-tools
      - run:
          command: VERSION=$(ci/release-tag) make checks
          when: always
      - run: VERSION=$(ci/release-tag) make build-config

      # Build QGIS images
      - run: >
          docker build --target=lint --build-arg=VERSION=latest docker/qgisserver
      - run: QGIS_VERSION=latest make build-qgisserver
      # LTR
      - run: QGIS_VERSION=3.4 make build-qgisserver
      - run: QGIS_VERSION=3.10 make build-qgisserver

      # Test changelog
      - run: ci/changelog new_version
      - run: git diff CHANGELOG.md
      - run: git checkout CHANGELOG.md ci/changelog.yaml

      # Tests
      - run:
          command: make preparetest
          when: always
      - run:
          command: docker-compose logs --timestamps
          when: on_fail
      # Similar to: make tests-commons
      - run:
          command: >
            ci/run-dc-logs docker-compose exec tests coverage run
            --source=/opt/c2cgeoportal/commons/c2cgeoportal_commons
            --module pytest --verbose --color=yes --junitxml=/tmp/commons.xml
            /opt/c2cgeoportal/commons/tests
          when: always
      # Similar to: make tests-geoportal
      - run:
          command: >
            ci/run-dc-logs docker-compose exec tests coverage run --append
            --source=/opt/c2cgeoportal/geoportal/c2cgeoportal_geoportal
            --module pytest --verbose --color=yes --junitxml=/tmp/geoportal.xml
            /opt/c2cgeoportal/geoportal/tests
          when: always
      # Similar to: make tests-admin
      - run:
          command: >
            ci/run-dc-logs docker-compose exec tests coverage run --append
            --source=/opt/c2cgeoportal/admin/c2cgeoportal_admin
            --module pytest --verbose --color=yes --junitxml=/tmp/admin.xml
            /opt/c2cgeoportal/admin/tests
          when: always
      # Similar to: make tests-qgisserver
      - run:
          command: >
            ci/run-dc-logs docker-compose exec qgisserver-tests coverage run
            --source=/var/www/plugins/geomapfish_qgisserver
            --module pytest --verbose --color=yes --junitxml=/tmp/qgis.xml
            /src/tests/functional
          when: always
      - run:
          name: Extract tests artifacts
          command: |
              docker-compose exec tests coverage report
              docker-compose exec tests coverage html --directory=/tmp/coverage
              docker-compose exec qgisserver-tests coverage report
              docker-compose exec qgisserver-tests coverage html --directory=/tmp/coverage
              mkdir --parent artifacts/geoportal-coverage
              mkdir --parent artifacts/qgisserver-plugin-coverage
              mkdir --parent test-reports
              docker cp c2cgeoportal_tests_1:/tmp/commons.xml test-reports/
              docker cp c2cgeoportal_tests_1:/tmp/geoportal.xml test-reports/
              docker cp c2cgeoportal_tests_1:/tmp/admin.xml test-reports/
              docker cp c2cgeoportal_qgisserver-tests_1:/tmp/qgis.xml test-reports/
              docker cp c2cgeoportal_tests_1:/tmp/coverage/ artifacts/geoportal-coverage/
              docker cp c2cgeoportal_qgisserver-tests_1:/tmp/coverage/ artifacts/qgisserver-plugin-coverage/
          when: always
      - run: docker-compose down

      # Documentation
      - run: >
            docker build --tag=camptocamp/geomapfish-doc
            --build-arg=MAJOR_VERSION=${MAJOR_VERSION}
            --build-arg=MAIN_BRANCH=${MAIN_BRANCH}
            doc

      - run:
          command: docker images
          when: always

      - run:
          name: Extract documentation
          command: ci/extract-documentation artifacts/documentations/
          when: always

      - store_artifacts:
          path: artifacts
          destination: results
      - store_test_results:
          path: test-reports

      - run: &notify
          name: Notify
          when: on_fail
          command: |
            if [ "${CIRCLE_BRANCH}" == ${MAIN_BRANCH} ]
            then
            sudo killall -9 apt-get || true
            sudo apt-get update
            sudo apt-get install msmtp-mta
            cat \<< EOF > /tmp/msmtprc
            defaults
            tls on
            tls_certcheck off
            syslog on
            account default
            host email-smtp.eu-west-1.amazonaws.com
            port 587
            auth on
            user ${SMTP_USERNAME}
            password ${SMTP_PASSWORD}
            from ci@camptocamp.com
            EOF
            chmod 600 /tmp/msmtprc
            cat \<< EOF > /tmp/msg
            Subject: CircleCI build failed on ${CIRCLE_PROJECT_REPONAME}

            Project: ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
            Branch: ${CIRCLE_BRANCH}
            Job: ${CIRCLE_JOB}
            ${CIRCLE_BUILD_URL}
            EOF
            sendmail --file=/tmp/msmtprc stephane.brunner@camptocamp.com < /tmp/msg
            fi

  test-app-upgrade:
    environment: *environment
    machine: true
    # machine:
    #   docker_layer_caching: true
    steps:
      - run: &python
          name: Install Python 3.7
          command: |
            sudo killall -9 apt-get || true
            sudo apt-get update
            sudo apt-get install python3-pip
            python3 --version
            python3 -m pip --version
      - checkout
      - run: python3 -m pip install --user --requirement=ci/requirements.txt

      # Test App
      - run: ci/test-app

      # Test Upgrade
      - run: VERSION=$(ci/release-tag) DOCKER_TAG=$(ci/release-tag) make build-tools
      - run: VERSION=$(ci/release-tag) DOCKER_TAG=$(ci/release-tag) make build-runner
      - run: VERSION=$(ci/release-tag) DOCKER_TAG=$(ci/release-tag) make build-config
      - run: ci/test-upgrade init ${HOME}/workspace
      - run: ci/test-upgrade 240 ${HOME}/workspace
      - run: ci/test-upgrade 25 ${HOME}/workspace
      - run: ci/test-upgrade cleanup ${HOME}/workspace
      - run: *notify

  publish-nonmain:
    environment: *environment
    machine: true
    # machine:
    #   docker_layer_caching: true
    steps:
      - run: *python
      - checkout
      - run: &init-git
          name: Init Git
          command: |
            git remote set-url origin https://${GITHUB_TOKEN}@github.com/camptocamp/c2cgeoportal
            git config user.email "<ci@camptocamp.com>"
            git config user.name "CI"
            git fetch origin
      - deploy: &publish-docker-pip
          name: Push to Docker hub and Pypi
          command: |
            VERSION=$(ci/release-tag) make build-tools
            VERSION=$(ci/release-tag) make build-runner
            VERSION=$(ci/release-tag) make build-config
            docker build --target=runner --build-arg=VERSION=latest \
            --tag=camptocamp/geomapfish-qgisserver:gmf${MAJOR_VERSION}-qgismaster \
            docker/qgisserver
            # LTR
            docker build --target=runner --build-arg=VERSION=3.4 \
            --tag=camptocamp/geomapfish-qgisserver:gmf${MAJOR_VERSION}-qgis3.4 \
            docker/qgisserver
            docker build --target=runner --build-arg=VERSION=3.10 \
            --tag=camptocamp/geomapfish-qgisserver:gmf${MAJOR_VERSION}-qgis3.10 \
            docker/qgisserver
            ci/publish
      - run: *notify

  publish:
    environment: *environment
    machine: true
    # machine:
    #   docker_layer_caching: true
    steps:
      - run: *python
      - checkout
      - run: *init-git
      - deploy: *publish-docker-pip
      - deploy:
          name: Push to Transifex
          command: |
            docker build --target=tools --tag=transifex --build-arg=MAJOR_VERSION=${MAJOR_VERSION} .
            docker run --name=transifex -ti --rm --detach transifex tail -f /dev/null
            docker exec transifex bash -c "echo \"[https://www.transifex.com]\" > ~/.transifexrc"
            docker exec transifex bash -c "echo \"hostname = https://www.transifex.com\" >> ~/.transifexrc"
            docker exec transifex bash -c "echo \"username = ${TRANSIFEX_USERNAME}\" >> ~/.transifexrc"
            docker exec transifex bash -c "echo \"password = ${TRANSIFEX_PASSWORD}\" >> ~/.transifexrc"
            docker exec transifex bash -c "echo \"token =\" >> ~/.transifexrc"
            docker exec transifex bash -c '(cd /opt/c2cgeoportal; make --makefile=internal.mk transifex-send)'
            docker stop transifex
      - deploy:
          name: Publish documentation to GitHub.io
          command: |
            ci/publish-documentation
      - run:
          name: Clean Docker hub tags
          command: ci/clean-dockerhub-tags
      - run: *notify

workflows:
  version: 2
  full:
    jobs:
      - main:
          filters: &ignore-cherry-pick-branches
            branches:
              ignore: /cherry-pick-backport.*/
      - test-app-upgrade:
          filters: *ignore-cherry-pick-branches
      - publish:
          filters:
            branches:
              only: &main-branches
                - master
                - /[0-9]\.[0-9]/
          requires:
            - main
            - test-app-upgrade
      - publish-nonmain:
          filters:
            branches:
              ignore: *main-branches
          requires:
            - main
            - test-app-upgrade
