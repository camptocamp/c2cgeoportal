#!/usr/bin/env python3

# Copyright (c) 2019-2020, Camptocamp SA
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.


import json
import os
import re
import subprocess
import sys
from typing import Any, Dict, List, Tuple

import requests
import yaml

REPOS = ("c2cgeoportal", "ngeo")

with open("ci/changelog.yaml", encoding="utf-8") as cl_file:
    changelog = yaml.load(cl_file, Loader=yaml.SafeLoader)


def _save() -> None:
    with open("ci/changelog.yaml", "w", encoding="utf-8") as cl_file_w:
        cl_file_w.write(yaml.dump(changelog, Dumper=yaml.SafeDumper))


def _output(cmd: List[str]) -> bytes:
    with subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
        if proc.stdout is None:
            return b""
        return proc.stdout.read()


def _get_any(repo: str, ref: str, section: str, url: str) -> Tuple[bool, Dict[str, Any]]:
    if section not in changelog:
        changelog[section] = {}
    if repo not in changelog[section]:
        changelog[section][repo] = {}

    if ref in changelog[section][repo]:
        return False, changelog[section][repo][ref]

    token = (
        os.environ["GITHUB_TOKEN"]
        if "GITHUB_TOKEN" in os.environ
        else subprocess.check_output(["gopass", "gs/ci/github/token/gopass"]).decode().strip()
    )
    json_stuff = requests.get(
        url.format(repo, ref),
        headers={
            "Accept": "application/vnd.github.groot-preview+json",
            "Authorization": f"token {token}",
        },
    ).json()

    changelog[section][repo][ref] = json_stuff
    return True, json_stuff


def _get_commit(repo: str, ref: str) -> Dict[str, Any]:
    dirty, commit = _get_any(repo, ref, "commits", "https://api.github.com/repos/camptocamp/{}/commits/{}")
    if "sha" not in commit:
        print(f"Error on commit {ref}.")
        print(commit)
        sys.exit(1)

    for key in list(commit.keys()):
        if key not in ("parents", "sha"):
            del commit[key]
            dirty = True
    if commit["sha"] not in changelog["commits"][repo]:
        changelog["commits"][repo][commit["sha"]] = commit
        dirty = True
    if dirty:
        _save()
    return commit


def _get_pulls(repo: str, ref: str) -> List[Dict[str, Any]]:
    dirty, pulls = _get_any(repo, ref, "pulls", "https://api.github.com/repos/camptocamp/{}/commits/{}/pulls")
    if not isinstance(pulls, list):
        print(f"Error on commit {ref}.")
        print(pulls)
        sys.exit(1)
    for pull in pulls:
        if "base" in pull:
            pull["base_ref"] = pull["base"]["ref"]

    for pull in pulls:
        for key in list(pull.keys()):
            if key not in (
                "number",
                "title",
                "number",
                "closed_at",
                "created_at",
                "html_url",
                "state",
                "updated_at",
                "base_ref",
            ):
                del pull[key]
                dirty = True

    if dirty:
        changelog["pulls"][repo][ref] = [
            pull
            for pull in changelog["pulls"][repo][ref]
            if pull["state"] == "closed" and pull["base_ref"] != "master"
        ]

        _save()

    return [pull for pull in pulls if pull["state"] == "closed"]


def _add_new_release() -> None:
    """
    Add a new release in the releases list
    """
    if len(sys.argv) == 2:
        if len([e for e in changelog["releases"] if e["name"] == sys.argv[1]]) > 0:
            return

        npm_list = json.loads(
            _output(
                ["docker", "run", "--rm", "camptocamp/geomapfish-tools", "npm", "list", "--global", "--json"]
            ).decode()
        )

        version = npm_list["dependencies"]["ngeo"]["version"]
        match = re.match(
            r"[0-9]\.[0-9]\.[0-9]\-version\-[0-9]\.[0-9]\-latest\.[0-9]{8}T[0-9]{6}Z\.([0-9a-f]+)\.[0-9]\.[0-9]",
            version,
        )
        if match is None:
            raise Exception(f"Unable to parse version {version}")
        ngeo_ref = match.group(1)

        c2cgeoportal_ref = (
            subprocess.check_output(["git", "log", "--pretty=format:%h", "--abbrev-commit", "-n1"])
            .decode()
            .strip("\n ")
        )

        changelog["releases"].append(
            {"ngeo": ngeo_ref, "c2cgeoportal": c2cgeoportal_ref, "name": sys.argv[1]}
        )


def _add_commit(commits: Dict[str, bool], all_pulls: Dict[str, Any], repo: str, ref: str) -> None:
    if ref in commits:
        return
    commit = _get_commit(repo, ref)
    if commit["sha"] not in commits:
        pulls = _get_pulls(repo, ref)
        for pull in pulls:
            all_pulls[pull["number"]] = pull
        commits[commit["sha"]] = True
        # Get only the first parent to don't go in the pull request
        _add_commit(commits, all_pulls, repo, commit["parents"][0]["sha"])


def _main() -> None:
    if os.environ.get("MAIN_BRANCH") == "master":
        print("Ignored for master main branch")
        return

    # Remove duplicated release names
    releases = []
    releases_names = []
    for release in changelog["releases"]:
        if release["name"] not in releases_names:
            releases.append(release)
            releases_names.append(release["name"])
    changelog["releases"] = releases
    _add_new_release()

    first = True
    release_pulls: Dict[str, Any] = {}
    releases = []
    commits: Dict[str, Any] = {}
    for repo in REPOS:
        commits[repo] = {}

    for release in changelog["releases"]:
        if first:
            for repo in REPOS:
                commits[repo][_get_commit(repo, release[repo])["sha"]] = True
            first = False
            continue

        releases.append(release["name"])
        release_pulls[release["name"]] = {}
        for repo in REPOS:
            release_pulls[release["name"]][repo] = {}
            _add_commit(commits[repo], release_pulls[release["name"]][repo], repo, release[repo])

    with open("CHANGELOG.md", "w", encoding="utf-8") as md_file:
        first = True
        for release in releases[::-1]:
            pulls = release_pulls[release]
            title = True
            for repo in REPOS:
                for pull in sorted(pulls[repo].values(), key=lambda pull: pull["number"]):
                    if pull["base_ref"] != "master":
                        if title:
                            if first:
                                first = False
                            else:
                                md_file.write(f"\n")
                            md_file.write(f"##### {release}\n\n")
                            title = False
                        md_file.write(
                            f'- {pull["title"].strip()} [{repo}#{pull["number"]}]({pull["html_url"]})\n'
                        )


if __name__ == "__main__":
    _main()
