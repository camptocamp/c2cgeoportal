#!/usr/bin/env python3

# The MIT License (MIT)
#
# Copyright (c) Camptocamp SA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import argparse
import sys
from typing import Any

import yaml


def _print_flat(data: Any, path: str = "", result: list[str] | None = None) -> list[str]:
    if result is None:
        result = []
    if isinstance(data, dict):
        for key, value in data.items():
            _print_flat(value, f"{path}.{key}" if path else key)
    elif isinstance(data, list):
        for value in data:
            _print_flat(value, path)
    else:
        result.append(f"{path}={data}")
    return result


def main() -> None:
    """
    yamlutlis: print a yaml file as lines such as.

    example:
    --------

    cat << EOF > /tmp/file.yaml
    a:
      aa:
        - 1
        - 2
      ab:
       - name: first
         value: firstvalue
       - name: second
         value: secondvalue
    b:
      baa:
        merli:
          x: 1
          y:
            toto:
              bip:
                - 12
                - 24
            kiki: 42
      df:
        xyz: 10
      bb: 4
    EOF

    it can be used with a file argument or in a pipe

    # as file
    ./yamlutils /tmp/file.yaml

    # in a pipe
    cat /tmp/file.yaml | ./yamlutils

    both the above commands output the following:

    a.aa=1
    a.aa=2
    a.ab.name=first
    a.ab.value=firstvalue
    a.ab.name=second
    a.ab.value=secondvalue
    b.bb=4
    b.baa.merli.x=1
    b.baa.merli.y.kiki=42
    b.baa.merli.y.toto.bip=12
    b.baa.merli.y.toto.bip=24
    b.df.xyz=10

    """
    parser = argparse.ArgumentParser()
    parser.add_argument("file", nargs="?", help="file to read")
    args = parser.parse_args()
    if args.file:
        with open(args.file, encoding="utf-8") as yaml_file:
            document = yaml_file.read()
    else:
        document = "\n".join(sys.stdin.readlines())

    yaml_content = _print_flat(yaml.load(document, Loader=yaml.SafeLoader))
    sys.stdout.write(str("\n".join(yaml_content)))


if __name__ == "__main__":
    main()
