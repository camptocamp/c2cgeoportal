#!/usr/bin/env python3

# The MIT License (MIT)
#
# Copyright (c) Camptocamp SA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import os

import boto3


def main():
    parser = argparse.ArgumentParser(description="Get the list of geotiff files for `gdalbuildvrt`")
    parser.add_argument("bucket")
    parser.add_argument("prefix")
    parser.add_argument("postfix", nargs="?", default=".bt")
    args = parser.parse_args()

    session = boto3.session.Session()

    s3_client = session.client(
        service_name="s3",
        endpoint_url=f"https://{os.environ['AWS_S3_ENDPOINT']}/",
        region_name=os.environ["AWS_DEFAULT_REGION"],
    )
    # According to S3 https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.list_objects_v2
    # doc this function return at most 1000 keys. To ensure we retrieve all the key from the prefix, use continuation token.
    kwargs = {"Bucket": bucket, "Prefix": prefix}
    while True:
        obj_list_metadata = s3_client.list_objects_v2(**kwargs)

        for obj in obj_list_metadata["Contents"]:
            if obj["Key"].endswith(postfix):
                print(f"/vsis3/{args.bucket}/{obj['Key']}")
        if "NextContinuationToken" in obj_list_metadata:
            kwargs["ContinuationToken"] = obj_list_metadata["NextContinuationToken"]
        else:
            break


if __name__ == "__main__":
    main()
