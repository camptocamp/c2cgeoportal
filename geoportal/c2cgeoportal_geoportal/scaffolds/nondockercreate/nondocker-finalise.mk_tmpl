# This file is used to finalise non Docker production environment

OPERATING_SYSTEM ?= LINUX
PACKAGE = {{package}}

ifeq ($(OPERATING_SYSTEM), WINDOWS)
FIND ?= find.exe
else
FIND ?= find
endif

ifeq ($(DEBUG), TRUE)
PRERULE_CMD ?= @echo "Build \033[1;34m$@\033[0m due modification on \033[1;34m$?\033[0m" 1>&2; ls -t --full-time --reverse $? $@ 1>&2 || true
endif


# Print
PRINT ?= TRUE
ifeq ($(PRINT), TRUE)
PRINT_WAR ?= print-$(INSTANCE_ID).war
PRINT_OUTPUT ?= /srv/tomcat/tomcat1/webapps
JASPERREPORTS_VERSION ?= 6.1.1
TOMCAT_SERVICE_COMMAND ?= sudo /etc/init.d/tomcat-tomcat1
ifneq ($(TOMCAT_SERVICE_COMMAND),)
TOMCAT_STOP_COMMAND ?= $(TOMCAT_SERVICE_COMMAND) stop
TOMCAT_START_COMMAND ?= $(TOMCAT_SERVICE_COMMAND) start
endif
PRINT_OUTPUT_WAR = $(PRINT_OUTPUT)/$(PRINT_WAR)
PRINT_INPUT += print-apps WEB-INF
PRINT_REQUIREMENT += $(PRINT_EXTRA_LIBS) \
	print/WEB-INF/classes/logback.xml \
	print/WEB-INF/classes/mapfish-spring-application-context-override.xml \
	print/print-servlet.war \
	$(shell $(FIND) print/print-apps)
endif

# Apache

APACHE_VHOST ?= $(PACKAGE)
APACHE_CONF_DIR ?= /var/www/vhosts/$(APACHE_VHOST)/conf
APACHE_GRACEFUL ?= sudo /usr/sbin/apache2ctl graceful
APACHE_CONF = $(APACHE_CONF_DIR)/$(INSTANCE_ID).conf \

TILECLOUD_CHAIN ?= TRUE
ifeq ($(TILECLOUD_CHAIN), TRUE)
APACHE_CONF += apache/tiles.conf
endif

apache/tiles.conf: .build/venv.timestamp tilegeneration/config.yaml apache/mapcache.xml
	$(PRERULE_CMD)
	.build/venv/bin/generate_controller --generate-apache-config

.PHONY: help
help:
	@echo  "Usage: make <target>"
	@echo
	@echo  "Main targets:"
	@echo
	@echo  "- build			Build and configure the project"
	@echo  "- clean-all		Remove all the build artifacts"

.PHONY: clean-all
clean-all:
	rm -f $(APACHE_CONF_DIR)/$(INSTANCE_ID).conf
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -rf $(PRINT_OUTPUT)/$(PRINT_WAR)
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -rf $(PRINT_OUTPUT)/$(PRINT_WAR:.war=) 2> /dev/null || true
	rm --force --recursive c2cgeoportal_commons c2cgeoportal_geoportal c2cgeoportal_admin .build

.PHONY: build
build: $(PRINT_OUTPUT_WAR) \
	.build/apache.timestamp \
	.build/admin-npm.timestamp \

# Apache

$(APACHE_CONF_DIR)/$(INSTANCE_ID).conf:
	$(PRERULE_CMD)
	echo "Include $(shell pwd)/apache/*.conf" > $@

.build/apache.timestamp: \
		$(APACHE_CONF) \
		geoportal/config.yaml \
		.build/venv.timestamp \
		geoportal/development.ini geoportal/production.ini
	$(PRERULE_CMD)
	$(APACHE_GRACEFUL)
	touch $@

# Print

.PHONY: print
print: $(PRINT_OUTPUT)/$(PRINT_WAR)

print/print-servlet.war: print_url
	$(PRERULE_CMD)
	curl --max-redirs 0 --location --output $@ $(shell cat $<)

$(PRINT_OUTPUT)/$(PRINT_WAR): $(PRINT_REQUIREMENT) print/print-servlet.war
	$(PRERULE_CMD)
ifeq ($(OPERATING_SYSTEM), WINDOWS)
	mkdir --parent print/tmp
	cp print/print-servlet.war print/tmp/$(PRINT_WAR)
	zip -d print/tmp/$(PRINT_WAR) print-apps/
	cd print && jar -uf tmp/$(PRINT_WAR) $(PRINT_INPUT)
else
	cp print/print-servlet.war /tmp/$(PRINT_WAR)
	zip -d /tmp/$(PRINT_WAR) print-apps/
	cd print && jar -uf /tmp/$(PRINT_WAR) $(PRINT_INPUT)
	chmod g+r,o+r /tmp/$(PRINT_WAR)
endif

ifneq ($(TOMCAT_STOP_COMMAND),)
	$(TOMCAT_STOP_COMMAND)
endif
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -f $(PRINT_OUTPUT)/$(PRINT_WAR)
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -rf $(PRINT_OUTPUT)/$(PRINT_WAR:.war=) 2> /dev/null || true
ifeq ($(OPERATING_SYSTEM), WINDOWS)
	mv print/tmp/$(PRINT_WAR) $(PRINT_OUTPUT)
	cd print && rm -fd tmp
else
	$(TOMCAT_OUTPUT_CMD_PREFIX) cp /tmp/$(PRINT_WAR) $(PRINT_OUTPUT)
	rm -f /tmp/$(PRINT_WAR)
endif
ifneq ($(TOMCAT_START_COMMAND),)
	$(TOMCAT_START_COMMAND)
endif

# Deploy branch

.PHONY: deploy-branch
deploy-branch:
	@read -p "Are you sure to deploy the branch in $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH) (Y/n)?" RESP; RESP=`echo $$RESP | tr '[:upper:]' '[:lower:]'`; /usr/bin/test "$$RESP" == "y" -o "$$RESP" == "yes" -o "$$RESP" == ""
	rm -f $(APACHE_CONF_DIR)/$(GIT_BRANCH).conf
	rm -rf $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH)
	mkdir --parents $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH)
	git clone $(GIT_REMOTE_URL) -b $(GIT_BRANCH) $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH)
	cd $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH); INSTANCE_ID=$(GIT_BRANCH) APACHE_CONF_DIR=$(APACHE_CONF_DIR) APACHE_ENTRY_POINT=/$(GIT_BRANCH)/ $(MAKE) -f $(DEPLOY_BRANCH_MAKEFILE) build
	@echo Now open $(DEPLOY_BRANCH_BASE_URL)/$(GIT_BRANCH)

.PHONY: remove-branch
remove-branch:
	rm -f $(APACHE_CONF_DIR)/$(GIT_BRANCH).conf
	rm -fr $(DEPLOY_BRANCH_DIR)/$(GIT_BRANCH)
	$(APACHE_GRACEFUL)

# Extract

ifeq ($(OPERATING_SYSTEM), WINDOWS)
PYTHON = python
PYTHON_BIN = .build/venv/Scripts
DOCKER_RUN = python docker-run
else
PYTHON = python3
PYTHON_BIN = .build/venv/bin
DOCKER_RUN = ./docker-run
endif

extract-docker: c2cgeoportal_commons c2cgeoportal_geoportal c2cgeoportal_admin npm-packages

c2cgeoportal_commons: .config
	rm --force --recursive c2cgeoportal_commons
	$(DOCKER_RUN) cp -r /opt/c2cgeoportal_commons c2cgeoportal_commons

c2cgeoportal_geoportal: .config
	rm --force --recursive c2cgeoportal_geoportal
	$(DOCKER_RUN) cp -r /opt/c2cgeoportal_geoportal c2cgeoportal_geoportal

c2cgeoportal_admin: .config
	rm --force --recursive c2cgeoportal_admin
	$(DOCKER_RUN) cp -r /opt/c2cgeoportal_admin c2cgeoportal_admin

.build/venv.timestamp: .config c2cgeoportal_commons c2cgeoportal_geoportal c2cgeoportal_admin
	$(PRERULE_CMD)
	mkdir --parent .build
	rm -rf .build/venv
ifdef CI
	virtualenv --python=python3 --system-site-packages .build/venv
else
	$(PYTHON) -m venv --system-site-packages .build/venv
endif
ifeq ($(OPERATING_SYSTEM), WINDOWS)
	$(PYTHON_BIN)/python -m pip install --upgrade pip
	$(PYTHON_BIN)/python -m pip install $(shell python ./get-pip-dependencies c2cgeoportal-commons c2cgeoportal-geoportal c2cgeoportal-admin linesman networkx pygraphviz Shapely Fiona rasterio GDAL flake8-mypy mypy)
else
	$(PYTHON_BIN)/python -m pip install `./get-pip-dependencies c2cgeoportal-commons c2cgeoportal-geoportal c2cgeoportal-admin GDAL flake8-mypy mypy`
endif
	$(PYTHON_BIN)/python -m pip install -r requirements.txt
	$(PYTHON_BIN)/python -m pip install --editable=c2cgeoportal_commons --editable=c2cgeoportal_geoportal --editable=c2cgeoportal_admin
	$(PYTHON_BIN)/python -m pip install --editable=geoportal
	$(PYTHON_BIN)/python -m compileall -q .build/venv >/dev/null || true
	$(PYTHON_BIN)/python -m compileall -q c2cgeoportal_* >/dev/null || true
	$(PYTHON_BIN)/python -m compileall -q geoportal/$(PACKAGE)_geoportal -x geoportal/$(PACKAGE)_geoportal/static.* >/dev/null || true
	touch $@

npm-packages: .config
	$(DOCKER_RUN) cp /opt/c2cgeoportal_admin/npm-packages $@

geoportal/npm-packages: .config
	$(DOCKER_RUN) cp /opt/npm-packages $@

.build/admin-npm.timestamp: npm-packages
	mkdir --parent admin
	(cd admin; cat ../$< | xargs npm install)
	touch $@

.build/geoportal-npm.timestamp: geoportal/npm-packages
	mkdir --parent admin
	(cd geoportal; cat ../$< | xargs npm install)
	touch $@

.PHONY: serve-%
serve-%: .build/geoportal-npm.timestamp
	(cd geoportal; INTERFACE=$* NODE_ENV=development node_modules/.bin/webpack-dev-server --port=$(DEV_SERVER_PORT) -d --watch --progress \
		--public=$(VISIBLE_WEB_HOST):$(VISIBLE_WEB_PORT) --disable-host-check --mode=development)
	rm geoportal/node_modules
