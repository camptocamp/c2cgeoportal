---

extends: CONST_vars.yaml

vars:
  host: '{VISIBLE_WEB_HOST}'
  web_protocol: '{VISIBLE_WEB_PROTOCOL}'
  entry_point: '{VISIBLE_ENTRY_POINT}'

  # Database user
  dbuser: '{PGUSER}'
  # Database password
  dbpassword: '{PGPASSWORD}'
  # Database port
  dbport: '{PGPORT}'
  # Database name
  db: '{PGDATABASE}'

  mapserver_url: '{MAPSERVER_URL}'
  mapcache_url: '{MAPCACHE_URL}'
  memcached_host: '{MEMCACHED_HOST}'
  memcached_port: '{MEMCACHED_PORT}'
  tilegeneration_sqs_queue: '{TILEGENERATION_SQS_QUEUE}'
  tilegeneration_redis: 'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

  # mapserver connexion string
  mapserver_connection: user={dbuser} password={dbpassword} dbname={db} host={dbhost}
  # mapserver join tables
  mapserver_join_tables: "{schema}.restrictionarea AS ra, {schema}.role_restrictionarea AS rra, \
    {schema}.layer_restrictionarea AS lra, {schema}.treeitem AS la"
  # mapserver visible area
  mapserver_join_area: ra.area
  # mapserver join close
  mapserver_join_where: "rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND \
    lra.restrictionarea_id = ra.id AND lra.layer_id = la.id AND la.name = "
  # mapserver metadata for validation
  mapserver_layer_metadata: ""
  mapserver_layer_validation: |
    "default_role_ids" "-1"
    "role_ids" "^-?[0-9,]*$"
  # mapfile data subselect
  mapfile_data_subselect: "SELECT ST_Collect(ra.area) FROM {schema}.restrictionarea AS ra, \
    {schema}.role_restrictionarea AS rra, {schema}.layer_restrictionarea AS lra, {schema}.treeitem AS la \
    WHERE rra.role_id in (%role_ids%) AND rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id \
    AND lra.layer_id = la.id AND la.name = "
  # mapserver filter on role id only
  mapfile_data_noarea_subselect: "SELECT rra.role_id FROM {mapserver_join_tables} \
    WHERE rra.restrictionarea_id = ra.id AND lra.restrictionarea_id = ra.id \
    AND lra.layer_id = la.id AND la.name = "

  instance: '{INSTANCE_ID}'
  instanceid: '{instance}'
  python_path: "{project_directory}/.build/venv/lib/python{EXTERNAL_PYTHON_VERSION_MAJOR}.\
    {EXTERNAL_PYTHON_VERSION_MINOR}/site-packages"
  apache_entry_point: '{entry_point}'
  modwsgi_user: '{MODWSGI_USER}'
  dbhost: '{DOCKER_HOST_}'
  dbhost_slave: '{DOCKER_HOST_}'
  adrs4: "' '.join(['{}/{}'.format(__import__('netifaces').ifaddresses(iface)[2][0]['addr'], \
    __import__('netifaces').ifaddresses(iface)[2][0]['netmask']) \
    for iface in __import__('netifaces').interfaces() if 2 in __import__('netifaces').ifaddresses(iface)])"
  adrs6: "' '.join(['{}/{}'.format(__import__('netifaces').ifaddresses(iface)[10][0]['addr'].split('%')[0], \
    __import__('netifaces').ifaddresses(iface)[10][0]['netmask'].split('/')[-1]) \
    for iface in __import__('netifaces').interfaces() if 10 in __import__('netifaces').ifaddresses(iface)])"
  mapserv_allow: |
    Allow from {ADDRESSES} {adrs4} {adrs6}
    Require ip {ADDRESSES} {adrs4} {adrs6}
  waitress_port: 5000

  wmtscapabilities_path: '{WMTSCAPABILITIES_PATH}'
  tinyowsproxy:
    tinyows_url: http://localhost/{instanceid}/tinyows
    ogc_server: source for image/png
  print_url: http://localhost:8080/print-{instanceid}/print/{package}
  devserver_url: http://localhost:{DEV_SERVER_PORT}/{instanceid}/wsgi/
  pdfreport:
    print_url: http://localhost:8080/print-{instanceid}/print/{package}
  servers:
    internal: http://localhost/{instanceid}/
    local: '{web_protocol}://{host}/{instanceid}/'
    mapserver: http://localhost/{instanceid}/mapserv
  tiles_url:
    - '{web_protocol}:://a.tiles.{host}/{instanceid}/tiles'
    - '{web_protocol}:://b.tiles.{host}/{instanceid}/tiles'
    - '{web_protocol}:://c.tiles.{host}/{instanceid}/tiles'

  lingua_extractor:
    host_map:
      localhost:
        netloc: '{DOCKER_HOST_}'
        scheme: https
        headers:
          Host: '{host}'
        verify: False

  host_forward_host:
    - localhost

  cache:
    backend: dogpile.cache.memory_pickle

  checker:
    base_internal_url: http://localhost
    forward_host: True
    phantomjs:
      routes: []

  check_collector:
    hosts:
      - display: Main
        url: '{web_protocol}://{host}/{instanceid}/wsgi'

interpreted:
  python:
    - adrs4
    - adrs6

update_paths:
  - checker.phantomjs
  - check_collector

environment:
  - ADDRESSES
  - INSTANCE_ID
  - MODWSGI_USER
  - DOCKER_HOST_
  - VISIBLE_WEB_HOST
  - VISIBLE_WEB_PROTOCOL
  - VISIBLE_ENTRY_POINT
  - PGHOST
  - PGHOST_SLAVE
  - PGPORT
  - PGUSER
  - PGPASSWORD
  - PGDATABASE
  - PGSCHEMA
  - PGSCHEMA_STATIC
  - TINYOWS_URL
  - MAPSERVER_URL
  - PRINT_URL
  - EXTERNAL_PYTHON_VERSION_MAJOR
  - EXTERNAL_PYTHON_VERSION_MINOR
  - DEV_SERVER_PORT
  - WMTSCAPABILITIES_PATH
