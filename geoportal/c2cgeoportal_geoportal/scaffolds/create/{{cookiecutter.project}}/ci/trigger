#!/usr/bin/env python3

import argparse
import os.path
import subprocess
import sys

import yaml
from yaml.loader import Loader


def main():
    parser = argparse.ArgumentParser(description="Publish Docker images")
    parser.add_argument("--version", help="The version to be exported")
    parser.add_argument(
        "--image-stream-name",
        dest="imagestreams",
        action="append",
        help=(
            "The image stream names can use template values: {version}, {image}, {env}, {version_only}. "
            "Default to {version}-c2cgeoportal-{image}:{version}."
        ),
    )
    args = parser.parse_args()

    if args.version:
        version = args.version
    else:
        ref = os.environ["GITHUB_REF"].split("/")

        if ref[1] != "heads":
            print("Not a branch")
            sys.exit(0)

        version = "/".join(ref[2:])

        if version not in os.environ.get("HELM_RELEASE_NAMES", "").split(","):
            print("Not a release branch")
            sys.exit(0)

    openshift_version = "3.11.0"
    openshift_hash = "0cbc58b"
    openshift_version_name = "openshift-origin-client-tools-v{}-{}-linux-64bit".format(
        openshift_version, openshift_hash
    )
    openshift_file = openshift_version_name + ".tar.gz"
    openshift_url = "https://github.com/openshift/origin/releases/download/v{}/{}".format(
        openshift_version, openshift_file
    )
    subprocess.check_call(["wget", "--quiet", openshift_url], cwd="/tmp")
    subprocess.check_call(["tar", "xfz", openshift_file], cwd="/tmp")
    oc = f"/tmp/{openshift_version_name}/oc"  # pylint: disable=invalid-name

    subprocess.check_call(
        [
            oc,
            "login",
            subprocess.check_output(
                ["gopass", "show", "gs/ci/openshift/{}/url".format(os.environ["OPENSHIFT_PROJECT"])]
            ).decode(),
            "--token="
            + subprocess.check_output(
                ["gopass", "show", "gs/ci/openshift/{}/token".format(os.environ["OPENSHIFT_PROJECT"])]
            ).decode(),
        ]
    )

    docker_base = ""
    with open(".env", encoding="utf-8") as env_file:
        for env in env_file.read().splitlines():
            if env.startswith("DOCKER_BASE="):
                docker_base = env.split("=")[1]

    images = []
    with open("ci/config.yaml", encoding="utf-8") as config_file:
        ci_config = yaml.load(config_file, Loader=yaml.SafeLoader)
        for image_config in ci_config.get("publish", {}).get("docker", {}).get("images", []):
            if image_config["name"].startswith(f"{docker_base}-"):
                images.append(image_config["name"].substring(len(docker_base) + 1))

    for image in images:
        version_split = version.split("-")
        env = version_split[0]
        version_only = "-".join(version_split[1:])

        for imagestream in (
            args.imagestreams if args.imagestreams else ["{version}-c2cgeoportal-{image}:{version}"]
        ):
            openshift_image_ref = imagestream.format(
                version=version, image=image, env=env, version_only=version_only
            )
            subprocess.check_call(
                [
                    oc,
                    "import-image",
                    openshift_image_ref,
                    "--scheduled=true",
                    "--reference-policy=local",
                    "--namespace=" + os.environ["OPENSHIFT_PROJECT"],
                ]
            )


if __name__ == "__main__":
    main()
