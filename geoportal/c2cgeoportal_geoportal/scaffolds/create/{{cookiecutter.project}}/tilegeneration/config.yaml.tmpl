# yaml-language-server: $schema=https://raw.githubusercontent.com/camptocamp/tilecloud-chain/master/tilecloud_chain/schema.json

grids:
  # grid name, I just recommends to add the min resolution because it's common to not generate all the layers at the same resolution.
  swissgrid_05:
    # resolutions [required]
    # Resolutions from eCH-0056 - WMTS-07
    # https://www.ech.ch/dokument/473ea824-bbcd-43fa-ad0a-c7c84edfa1b8
    resolutions: [4000, 2000, 1000, 500, 250, 100, 50, 20, 10, 5, 2.5, 1, 0.5, 0.25, 0.1, 0.05]
    # bbox [required]
    bbox: [2420000, 1030000, 2900000, 1350000]
    # srs [required]
    srs: EPSG:{{cookiecutter.srid}}

caches:
${DISABLE_LOCAL}  local:
${DISABLE_LOCAL}    type: filesystem
${DISABLE_LOCAL}    folder: /var/sig/tiles
${DISABLE_LOCAL}    # for GetCapabilities
${DISABLE_LOCAL}    http_url: ${VISIBLE_WEB_PROTOCOL}://${VISIBLE_WEB_HOST}${VISIBLE_ENTRY_POINT}
${DISABLE_LOCAL}  s3:
${DISABLE_LOCAL}    type: s3
${DISABLE_LOCAL}    bucket: ${TILEGENERATION_S3_BUCKET}
${DISABLE_LOCAL}    folder: ''
${DISABLE_LOCAL}    # for GetCapabilities
${DISABLE_LOCAL}    http_url: ${VISIBLE_WEB_PROTOCOL}://${VISIBLE_WEB_HOST}${VISIBLE_ENTRY_POINT}
${DISABLE_LOCAL}    cache_control: 'public, max-age=14400'
${DISABLE_LOCAL}    host: ${AWS_S3_ENDPOINT}
  azure:
    type: azure
    container: ${TILEGENERATION_AZURE_CONTAINER}
    folder: ''
    # for GetCapabilities
    http_url: ${VISIBLE_WEB_PROTOCOL}://${VISIBLE_WEB_HOST}${VISIBLE_ENTRY_POINT}
    cache_control: 'public, max-age=14400'

# this defines some defaults values for all the layers
defaults:
  layer: &layer
    type: wms
    grid: swissgrid_05
    # The minimum resolution to seed, useful to use with mapcache, optional.
    # min_resolution_seed: 1
    # the URL of the WMS server to used
    url: ${MAPSERVER_URL}
    # Set the headers to get the right virtual host, and don't get any cached result
    headers:
      Host: '${VISIBLE_WEB_HOST}'
      Cache-Control: no-cache, no-store
      Pragma: no-cache
    # file name extension
    extension: png
    # legend file name extension
    legend_extension: png
    # the bbox there we want to generate tiles
    #bbox: [493000, 114000, 586000, 204000]

    # mime type used for the WMS request and the WMTS capabilities generation
    mime_type: image/png
    # mime type used for the WMS request and the WMTS legend image generation
    legend_mime: image/png
    wmts_style: default
    # the WMTS dimensions definition [default is []]
    #dimensions:
    #    -   name: DATE
    #        # the default value for the WMTS capabilities
    #        default: '2012'
    #        # the generated values
    #        generate: ['2012']
    #        # all the available values in the WMTS capabilities
    #        values: ['2012']
    # the meta tiles definition [default is false]
    meta: true
    # the meta tiles size [default is 8]
    meta_size: 5
    # the meta tiles buffer [default is 128]
    meta_buffer: 128
    # connection an sql to get geometries (in column named geom) where we want to generate tiles
    # Warn: too complex result can slow down the application
    #    connection: host=localhost port=5432 user=www-data password=www-data dbname=<db>
    #    geoms:
    #        -   sql: <column> AS geom FROM <table>
    # size and hash used to detect empty tiles and metatiles [optional, default is None]
    empty_metatile_detection:
      size: 740
      hash: 3237839c217b51b8a9644d596982f342f8041546
    empty_tile_detection:
      size: 921
      hash: 1e3da153be87a493c4c71198366485f290cad43c

layers:
  plan:
    <<: *layer
    layers: plan
  ortho:
    <<: *layer
    layers: ortho
    extension: jpeg
    mime_type: image/jpeg
    # no buffer needed on rater sources
    meta_buffer: 0
    empty_metatile_detection:
      size: 66163
      hash: a9d16a1794586ef92129a2fb41a739451ed09914
    empty_tile_detection:
      size: 1651
      hash: 2892fea0a474228f5d66a534b0b5231d923696da

generation:
  default_cache: s3

${DISABLE_LOCAL}redis:
${DISABLE_LOCAL}  socket_timeout: ${REDIS_TIMEOUT}
${DISABLE_LOCAL}  # For standalone version
${DISABLE_LOCAL}  url: 'redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}'
${DISABLE_LOCAL}  # For Kubernetes version
${DISABLE_LOCAL}  # sentinels:
${DISABLE_LOCAL}  #   - - ${REDIS_HOST}
${DISABLE_LOCAL}  #     - ${REDIS_PORT}
${DISABLE_LOCAL}  # service_name: ${REDIS_SERVICENAME}
${DISABLE_LOCAL}  # db: ${REDIS_DB}

server:
${DISABLE_LOCAL}  wmts_path: tiles
${DISABLE_LOCAL}  static_path: tiles/static
${DISABLE_LOCAL}  admin_path: tiles/admin
  expires: 8 # 8 hours
  predefined_commands:
    - name: Generation all layers
      command: generate_tiles
    - name: Generation layer plan
      command: generate_tiles --layer=plan
    - name: Generation layer ortho
      command: generate_tiles --layer=ortho
    - name: Generate the legend images
      command: generate_controller --generate-legend-images

process:
  optipng_test:
    - cmd: optipng -o7 -simulate %(in)s
  optipng:
    - cmd: optipng %(args)s -zc9 -zm8 -zs3 -f5 %(in)s
      arg:
        default: '-q'
        quiet: '-q'
  jpegoptim:
    - cmd: jpegoptim %(args)s --strip-all --all-normal -m 90 %(in)s
      arg:
        default: '-q'
        quiet: '-q'

openlayers:
  srs: EPSG:{{cookiecutter.srid}}
  center_x: 2600000
  center_y: 1200000
  # The proj4js definition, get it from https://epsg.io/
  # For EPSG:2056
  proj4js_def: |
    +proj=somerc
    +lat_0=46.95240555555556
    +lon_0=7.439583333333333
    +k_0=1
    +x_0=2600000
    +y_0=1200000
    +ellps=bessel
    +towgs84=674.374,15.056,405.346,0,0,0,0
    +units=m +no_defs

metadata:
  title: Some title
  abstract: Some abstract
  servicetype: OGC WMTS
  keywords:
    - some
    - keywords
  fees: None
  access_constraints: None

provider:
  name: The provider name
  url: The provider URL
  contact:
    name: The contact name
    position: The position name
    info:
      phone:
        voice: +41 11 222 33 44
        fax: +41 11 222 33 44
      address:
        delivery: Address delivery
        city: Berne
        area: BE
        postal_code: 3000
        country: Switzerland
        email: info@example.com
