#!/usr/bin/env python3

import argparse
import os
import re
import stat
import subprocess
import sys
import urllib.request

parser = argparse.ArgumentParser(description="Build the project,")
parser.add_argument("--rule", default="build", help="Make rule")
parser.add_argument("--pgschema", default="main", help="The main schema name used in PostgreSQL")
parser.add_argument("--upgrade", help="Start upgrading the project to version")
parser.add_argument("env_files", default=['env.sample'], nargs="*", help="The environment files")

args = parser.parse_args()

if args.upgrade:
    version_re = re.search(r"([0-9]\.[0-9])\.[0-9]", args.upgrade)
    major_version = version_re.group(0) if version_re is not None else args.upgrade
    full_version = args.upgrade if args.upgrade != "master" else "{{geomapfish_main_version}}"
    with open("upgrade", "w") as f:
        result = urllib.request.urlopen(
            "https://raw.githubusercontent.com/camptocamp/c2cgeoportal/{}/scripts/upgrade".format(
                major_version
            )
        )
        if result.code != 200:
            print("ERROR:")
            print(result.read())
            sys.exit(1)
        f.write(result.read().decode())
    os.chmod("upgrade", os.stat("upgrade").st_mode | stat.S_IXUSR)
    try:
        subprocess.check_call(["./upgrade", full_version])
    except subprocess.CalledProcessError:
        sys.exit(1)
    sys.exit(0)

env = {}
for env_file in args.env_files:
    with open(env_file) as f:
        for line in f:
            if line and line[0] != '#':
                try:
                    index = line.index('=')
                    env[line[:index].strip()] = line[index+1:].strip()
                except ValueError:
                    # Ignore lines that don't have a '='
                    pass

base = env['DOCKER_BASE'] if 'DOCKER_BASE' in env else "camptocamp/{{package}}"
tag = ":" + env['DOCKER_TAG'] if 'DOCKER_TAG' in env else ""

environ = dict(os.environ)
environ['DOCKER_BASE'] = base
environ['DOCKER_TAG'] = tag
environ['PGSCHEMA'] = args.pgschema
environ['GIT_HASH'] = subprocess.check_output(["git", "rev-parse", "HEAD"]).strip().decode()
environ['ENV_FILES'] = args.env

subprocess.check_call(["make", "build", args.rule])
if auto or args.config:
    subprocess.check_call(
        ["docker", "build", "--tag={}-config{}".format(base, tag), "--build-arg=PGSCHEMA=" + args.pgschema, "."]
    )
