global
    log /dev/log local2
    chroot      /tmp
    pidfile     /run/haproxy.pid
    maxconn     4000
    max-spread-checks 500  #ms between heathchecks of different services

    user        nobody
    group       nogroup


# allows the service IP changes to be detected (when a container is restarted, for example)
resolvers dns
    nameserver docker 127.0.0.11:53
    hold valid 1s


defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          10m
    timeout server          10m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
    default-server init-addr last,libc,none
    default-server inter 60s fall 3 rise 1
    default-server maxconn 50  # gunicorn is started with 5 processes and 10 threads each

    # compress responses
    compression algo gzip
    compression type text/html text/plain text/css text/xml application/xml application/javascript application/json image/svg+xml

    # Use provided example error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http


backend geoportal
    option httpchk GET / HTTP/1.0\r\nUser-Agent:\ healthcheck
    http-check expect status 200
    server linked geoportal:8080 resolvers dns #check


backend tilecloudchain
    option httpchk GET ${VISIBLE_ENTRY_POINT}c2c_tiles/health_check HTTP/1.0\r\nUser-Agent:\ healthcheck
    http-check expect status 200
    server linked tilecloudchain:8080 resolvers dns #check


frontend plain
    bind :80

    # Required variables from the request
    http-request set-var(req.path) path

    # If the path starts with /tiles/, use the tilecloudchain backend
    acl is_tiles var(req.path) -m beg ${VISIBLE_ENTRY_POINT}tiles/ ${VISIBLE_ENTRY_POINT}static_tiles/ ${VISIBLE_ENTRY_POINT}c2c_tiles/
    use_backend tilecloudchain if is_tiles

    # Redirect all to geoportal by default
    default_backend geoportal
