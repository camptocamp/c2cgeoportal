---
name: Continuous integration

on:
  push:

jobs:
  main:
    runs-on: ubuntu-20.04
    name: Continuous integration
    timeout-minutes: 70
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    env:
      MAIN_BRANCH: master
      MAJOR_VERSION: 2.6
      CI: true

    steps:
      - run: df -h
      - run: docker system prune --all --force

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
          patterns: pypi docker transifex
        if: github.repository == 'camptocamp/c2cgeoportal'

      - run: sudo python3 -m pip install --requirement=ci/requirements.txt

      - name: Checks
        run: c2cciutils-checks

      - run: scripts/get-version --auto-increment
        if: github.repository == 'camptocamp/c2cgeoportal'

      - run: python3 -m pip install --user --requirement=requirements.txt

      # Global simple lint
      - run: make yamllint
        if: always()

      # Build images
      - run: make build-runner
      - run: make build-tools
      - run: make checks
        if: always()
      - run: make build-config

      # Build and lint QGIS images
      - run: docker build --target=lint --build-arg=VERSION=3.16 docker/qgisserver
      - run: QGIS_VERSION=3.16 make build-qgisserver

      # Test changelog
      - run: ci/changelog new_version
      - run: git diff CHANGELOG.md
      - run: git checkout CHANGELOG.md ci/changelog.yaml

      # Tests
      - run: make preparetest
      - run: docker-compose logs --timestamps
        if: failure()
      # Similar to: make tests-commons
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run
          --source=/opt/c2cgeoportal/commons/c2cgeoportal_commons
          --module pytest --verbose --color=yes --junitxml=/tmp/commons.xml
          /opt/c2cgeoportal/commons/tests
      # Similar to: make tests-geoportal
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run --append
          --source=/opt/c2cgeoportal/geoportal/c2cgeoportal_geoportal
          --module pytest --verbose --color=yes --junitxml=/tmp/geoportal.xml
          /opt/c2cgeoportal/geoportal/tests
      # Similar to: make tests-admin
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run --append
          --source=/opt/c2cgeoportal/admin/c2cgeoportal_admin
          --module pytest --verbose --color=yes --junitxml=/tmp/admin.xml
          /opt/c2cgeoportal/admin/tests
      # Similar to: make tests-qgisserver
      - run: >
          ci/run-dc-logs docker-compose exec -T qgisserver-tests coverage run
          --source=/var/www/plugins/geomapfish_qgisserver
          --module pytest --verbose --color=yes --junitxml=/tmp/qgis.xml
          /src/tests/functional
      - name: Extract tests artifacts
        run: |
          docker-compose exec -T tests coverage report
          docker-compose exec -T tests coverage html --directory=/tmp/coverage
          docker-compose exec -T qgisserver-tests coverage report
          docker-compose exec -T qgisserver-tests coverage html --directory=/tmp/coverage
          mkdir --parent artifacts/geoportal-coverage
          mkdir --parent artifacts/qgisserver-plugin-coverage
          docker cp c2cgeoportal_tests_1:/tmp/coverage/ artifacts/geoportal-coverage/
          docker cp c2cgeoportal_qgisserver-tests_1:/tmp/coverage/ artifacts/qgisserver-plugin-coverage/
        if: always()
      - run: docker-compose down

      - uses: actions/upload-artifact@v1
        with:
          name: Geoportal coverage
          path: artifacts/geoportal-coverage/
      - uses: actions/upload-artifact@v1
        with:
          name: QGISserver plugin coverage
          path: artifacts/qgisserver-plugin-coverage/

      # Documentation
      - run: >
          docker build --tag=camptocamp/geomapfish-doc
          --build-arg=MAJOR_VERSION=${MAJOR_VERSION}
          --build-arg=MAIN_BRANCH=${MAIN_BRANCH}
          doc

      - name: Extract documentation
        run: ci/extract-documentation artifacts/documentations/
        if: always()

      - uses: actions/upload-artifact@v1
        with:
          name: Documentation
          path: artifacts/documentations/

      # Test App
      - run: ci/test-app
      - run: |
          cd ${HOME}/workspace/testgeomapfishapp/
          for service in $(docker-compose config --services)
          do
            docker-compose logs ${service}
          done
        if: failure()

      # Test Upgrade
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-tools
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-runner
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-config
      - run: docker images | grep "<none>" | awk '{print $3}' | xargs --no-run-if-empty docker rmi || true
      - run: ci/test-upgrade init ${HOME}/workspace
      - run: ci/test-upgrade 240 ${HOME}/workspace
      - run: ci/test-upgrade 250 ${HOME}/workspace
      - run: ci/test-upgrade 25 ${HOME}/workspace
      - run: ci/test-upgrade cleanup ${HOME}/workspace

      - name: Init Git
        run: git remote set-url origin
          https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
      - run: make build-tools
      - run: make build-runner
      - run: make build-config

      - name: Get versions
        id: version
        run: scripts/get-version --github

      - name: Publish other Docker images on feature branches
        run: c2cciutils-publish --group=full
        if: >
          github.ref != format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'
      - name: Publish Docker images with tag like 2.6.0.1 on main branches
        run: c2cciutils-publish --group=full --type=version_branch --version=${{ steps.version.outputs.full }}
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - run: ci/create-new-project ${HOME}/workspace geomapfish
      - run: (cd ${HOME}/workspace/geomapfish/; ./build)

      - name: Publish Docker images with tag like 2.6 and PyPI packages
        run: c2cciutils-publish
        if: github.repository == 'camptocamp/c2cgeoportal'

      - name: Notify demo
        run: >
          curl --request POST --header "Content-Type: application/json"
          --header 'Accept: application/vnd.github.v3+json'
          --header "Authorization: token ${{ secrets.GOPASS_CI_GITHUB_TOKEN }}"
          https://api.github.com/repos/camptocamp/demo_geomapfish/dispatches
          --data '{"event_type": "geomapfish_${{ env.MAJOR_VERSION }}_updated",
            "client_payload": {"version": "'"$(scripts/get-version --upgrade-version)"'"}}'
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - name: Publish to Transifex
        run: |
          docker build --target=tools --tag=transifex --build-arg=MAJOR_VERSION=${MAJOR_VERSION} .
          docker run --name=transifex -ti --rm --detach --volume=${HOME}:/root transifex tail -f /dev/null
          docker exec transifex bash -c \
              '(cd /opt/c2cgeoportal; make --makefile=dependencies.mk transifex-send)'
          docker stop transifex
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - name: Publish documentation to GitHub.io
        run: ci/publish-documentation
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - run: >
          docker run --rm --volume=/var/run/docker.sock:/var/run/docker.sock nate/dockviz
          images --tree
        if: always()
      - run: docker images
        if: always()
      - run: docker system df
        if: always()
      - run: df -h
        if: always()
