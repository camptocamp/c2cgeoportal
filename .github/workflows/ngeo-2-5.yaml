---
name: Update ngeo 2.5

on:
  repository_dispatch:
    types:
      - ngeo_25_updated

jobs:
  main:
    runs-on: ubuntu-20.04
    name: Update ngeo 2.5
    timeout-minutes: 70

    env:
      MAIN_BRANCH: 2.5
      MAJOR_VERSION: 2.5

    steps:
      - run: df -h
      - run: docker system prune --all --force

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GOPASS_CI_GITHUB_TOKEN }}
          ref: ${{ env.MAIN_BRANCH }}

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
          patterns: docker

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=ci/requirements.txt

      - name: Checks
        run: c2cciutils-checks

      - run: scripts/get-version --force-increment --github
        id: version

      - run: python3 -m pip install --user --requirement=requirements.txt

      # Global simple lint
      - run: make yamllint
        if: always()

      # Build images
      - run: make build-runner
      - run: make build-tools
      - run: make checks
        if: always()
      - run: make build-config

      # Build and lint QGIS images
      - run: docker build --target=lint --build-arg=VERSION=3.10 docker/qgisserver
      - run: QGIS_VERSION=3.10 make build-qgisserver

      # Tests
      - run: make preparetest
        if: always()
      - run: docker-compose logs --timestamps
        if: failure()
      # Similar to: make tests-commons
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run
          --source=/opt/c2cgeoportal/commons/c2cgeoportal_commons
          --module pytest --verbose --color=yes --junitxml=/tmp/commons.xml
          /opt/c2cgeoportal/commons/tests
        if: always()
      # Similar to: make tests-geoportal
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run --append
          --source=/opt/c2cgeoportal/geoportal/c2cgeoportal_geoportal
          --module pytest --verbose --color=yes --junitxml=/tmp/geoportal.xml
          /opt/c2cgeoportal/geoportal/tests
        if: always()
      # Similar to: make tests-admin
      - run: >
          ci/run-dc-logs docker-compose exec -T tests coverage run --append
          --source=/opt/c2cgeoportal/admin/c2cgeoportal_admin
          --module pytest --verbose --color=yes --junitxml=/tmp/admin.xml
          /opt/c2cgeoportal/admin/tests
        if: always()
      # Similar to: make tests-qgisserver
      - run: >
          ci/run-dc-logs docker-compose exec -T qgisserver-tests coverage run
          --source=/var/www/plugins/geomapfish_qgisserver
          --module pytest --verbose --color=yes --junitxml=/tmp/qgis.xml
          /src/tests/functional
        if: always()
      - name: Extract tests artifacts
        run: |
          docker-compose exec -T tests coverage report
          docker-compose exec -T tests coverage html --directory=/tmp/coverage
          docker-compose exec -T qgisserver-tests coverage report
          docker-compose exec -T qgisserver-tests coverage html --directory=/tmp/coverage
          mkdir --parent artifacts/geoportal-coverage
          mkdir --parent artifacts/qgisserver-plugin-coverage
          docker cp c2cgeoportal_tests_1:/tmp/coverage/ artifacts/geoportal-coverage/
          docker cp c2cgeoportal_qgisserver-tests_1:/tmp/coverage/ artifacts/qgisserver-plugin-coverage/
        if: always()
      - run: docker-compose down

      - uses: actions/upload-artifact@v1
        with:
          name: Geoportal coverage
          path: artifacts/geoportal-coverage/
      - uses: actions/upload-artifact@v1
        with:
          name: QGISserver plugin coverage
          path: artifacts/qgisserver-plugin-coverage/

      # Documentation
      - run: >
          docker build --tag=camptocamp/geomapfish-doc
          --build-arg=MAJOR_VERSION=${MAJOR_VERSION}
          --build-arg=MAIN_BRANCH=${MAIN_BRANCH}
          doc

      - name: Extract documentation
        run: ci/extract-documentation artifacts/documentations/
        if: always()

      - uses: actions/upload-artifact@v1
        with:
          name: Documentation
          path: artifacts/documentations/

      # Test App
      - run: ci/test-app

      # Test Upgrade
      - run: DOCKER_TAG=${{ steps.version.outputs.full }} make build-tools
      - run: DOCKER_TAG=${{ steps.version.outputs.full }} make build-runner
      - run: DOCKER_TAG=${{ steps.version.outputs.full }} make build-config
      - run: docker images | grep "<none>" | awk '{print $3}' | xargs --no-run-if-empty docker rmi || true
      - run: ci/test-upgrade init ${HOME}/workspace
      - run: ci/test-upgrade 240 ${HOME}/workspace
      - run: ci/test-upgrade 250 ${HOME}/workspace
      - run: ci/test-upgrade 25 ${HOME}/workspace
      - run: ci/test-upgrade cleanup ${HOME}/workspace

      - run: make build-tools
      - run: make build-runner
      - run: make build-config

      - name: Update the changelog
        run: ci/changelog ${{ steps.version.outputs.full }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: git diff CHANGELOG.md

      - name: Publish
        run: c2cciutils-publish --group=full --type=version_branch
          --version=${{ steps.version.outputs.major }}
      - name: Publish
        run: c2cciutils-publish --group=full --type=version_branch
          --version=${{ steps.version.outputs.full }}

      - run: ci/create-new-project ${HOME}/workspace geomapfish
      - run: (cd ${HOME}/workspace/geomapfish/; ./build)

      - name: Publish
        run: c2cciutils-publish --type=version_branch --version=${{ steps.version.outputs.major }}

      - name: Push version and changelog
        run: |
          git add ci/ci.yaml ci/changelog.yaml CHANGELOG.md
          git diff --staged --quiet || (\
            git commit -m "[skip ci] Update the minor version"
            git push https://${{ secrets.GOPASS_CI_GITHUB_TOKEN }}@github.com/camptocamp/c2cgeoportal.git \
              HEAD:${{ env.MAIN_BRANCH }}
          )

      - name: Notify demo
        run: >
          curl --request POST --header "Content-Type: application/json"
          --header 'Accept: application/vnd.github.v3+json'
          --header "Authorization: token ${{ secrets.GOPASS_CI_GITHUB_TOKEN }}"
          https://api.github.com/repos/camptocamp/demo_geomapfish/dispatches
          --data '{"event_type": "geomapfish_25_updated",
            "client_payload": {"version": "'"${{ steps.version.outputs.upgrade_version }}"'"}}'
