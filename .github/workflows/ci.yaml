---

name: Continuous integration

on:
  push:

jobs:
  main:
    runs-on: ubuntu-18.04
    name: Continuous integration
    timeout-minutes: 70
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    env:
      MAIN_BRANCH: master
      MAJOR_VERSION: 2.6
      CI: true
      PATH: /bin:/usr/bin:/usr/local/bin:/home/runner/.local/bin
      SUMMON_PROVIDER: /usr/local/bin/gopass

    steps:
      - run: df -h
      - run: docker system prune --all --force

      # Versions
      - run: docker --version
      - run: docker-compose --version
      - run: git --version
      - run: python3 --version
      - run: python3 -m pip --version
      - run: |
          sudo apt-get update
          sudo apt-get install python3-wheel python3-setuptools

      - uses: actions/checkout@v1
      - run: scripts/get-version --auto-increment
        if: github.repository == 'camptocamp/c2cgeoportal'

      - run: python3 -m pip install --user --requirement=requirements.txt

      # Global simple lint
      - run: make gitattributes
        if: always()
      - run: make eol
        if: always()
      - run: make codespell
        if: always()
      - run: make yamllint
        if: always()
      - run: make black
        if: always()

      # Build images
      - run: make build-runner
      - run: make build-tools
      - run: make checks
        if: always()
      - run: make build-config

      # Build and lint QGIS images
      - run: docker build --target=lint --build-arg=VERSION=3.10 docker/qgisserver
      - run: QGIS_VERSION=3.10 make build-qgisserver

      # Test changelog
      - run: ci/changelog new_version
      - run: git diff CHANGELOG.md
      - run: git checkout CHANGELOG.md ci/changelog.yaml

      # Tests
      - run: make preparetest
        if: always()
      - run: docker-compose logs --timestamps
        if: failure()
      # Similar to: make tests-commons
      - run: >
            ci/run-dc-logs docker-compose exec -T tests coverage run
            --source=/opt/c2cgeoportal/commons/c2cgeoportal_commons
            --module pytest --verbose --color=yes --junitxml=/tmp/commons.xml
            /opt/c2cgeoportal/commons/tests
        if: always()
      # Similar to: make tests-geoportal
      - run: >
            ci/run-dc-logs docker-compose exec -T tests coverage run --append
            --source=/opt/c2cgeoportal/geoportal/c2cgeoportal_geoportal
            --module pytest --verbose --color=yes --junitxml=/tmp/geoportal.xml
            /opt/c2cgeoportal/geoportal/tests
        if: always()
      # Similar to: make tests-admin
      - run: >
            ci/run-dc-logs docker-compose exec -T tests coverage run --append
            --source=/opt/c2cgeoportal/admin/c2cgeoportal_admin
            --module pytest --verbose --color=yes --junitxml=/tmp/admin.xml
            /opt/c2cgeoportal/admin/tests
        if: always()
      # Similar to: make tests-qgisserver
      - run: >
            ci/run-dc-logs docker-compose exec -T qgisserver-tests coverage run
            --source=/var/www/plugins/geomapfish_qgisserver
            --module pytest --verbose --color=yes --junitxml=/tmp/qgis.xml
            /src/tests/functional
        if: always()
      - name: Extract tests artifacts
        run: |
              docker-compose exec -T tests coverage report
              docker-compose exec -T tests coverage html --directory=/tmp/coverage
              docker-compose exec -T qgisserver-tests coverage report
              docker-compose exec -T qgisserver-tests coverage html --directory=/tmp/coverage
              mkdir --parent artifacts/geoportal-coverage
              mkdir --parent artifacts/qgisserver-plugin-coverage
              docker cp c2cgeoportal_tests_1:/tmp/coverage/ artifacts/geoportal-coverage/
              docker cp c2cgeoportal_qgisserver-tests_1:/tmp/coverage/ artifacts/qgisserver-plugin-coverage/
        if: always()
      - run: docker-compose down

      - uses: actions/upload-artifact@v1
        with:
          name: Geoportal coverage
          path: artifacts/geoportal-coverage/
      - uses: actions/upload-artifact@v1
        with:
          name: QGISserver plugin coverage
          path: artifacts/qgisserver-plugin-coverage/

      # Documentation
      - run: >
            docker build --tag=camptocamp/geomapfish-doc
            --build-arg=MAJOR_VERSION=${MAJOR_VERSION}
            --build-arg=MAIN_BRANCH=${MAIN_BRANCH}
            doc

      - name: Extract documentation
        run: ci/extract-documentation artifacts/documentations/
        if: always()

      - uses: actions/upload-artifact@v1
        with:
          name: Documentation
          path: artifacts/documentations/

      # Test App
      - run: ci/test-app

      # Test Upgrade
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-tools
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-runner
      - run: DOCKER_TAG=$(scripts/get-version --full) make build-config
      - run: docker images | grep "<none>" | awk '{print $3}' | xargs --no-run-if-empty docker rmi || true
      - run: ci/test-upgrade init ${HOME}/workspace
      - run: ci/test-upgrade 240 ${HOME}/workspace
      - run: ci/test-upgrade 250 ${HOME}/workspace
      - run: ci/test-upgrade 25 ${HOME}/workspace
      - run: ci/test-upgrade cleanup ${HOME}/workspace

      - name: Init Git
        run: |
            git remote set-url origin https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@${REPO_URL}
            git config user.email "<ci@camptocamp.com>"
            git config user.name "Continuous integration"
        env:
          REPO_URL: github.com/camptocamp/c2cgeoportal
      - run: make build-tools
      - run: make build-runner
      - run: make build-config

      - uses: camptocamp/initialise-gopass-summon-action@v1
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GITHUB_GOPASS_CI_TOKEN}}
        if: github.repository == 'camptocamp/c2cgeoportal'

      - name: Publish to Docker hub and Pypi
        run: |
          summon --yaml '
            DOCKER_USERNAME: !var gs/ci/dockerhub/username
            DOCKER_PASSWORD: !var gs/ci/dockerhub/password
            PYPI_USERNAME: !var gs/ci/pypi/username
            PYPI_PASSWORD: !var gs/ci/pypi/password
          ' ci/publish --geoportal
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_GOPASS_CI_TOKEN }}
        if: github.repository == 'camptocamp/c2cgeoportal'

      - name: Notify demo
        run: >
          curl --request POST --header "Content-Type: application/json"
          --header 'Accept: application/vnd.github.v3+json'
          --header "Authorization: token ${{ secrets.GITHUB_GOPASS_CI_TOKEN }}"
          https://api.github.com/repos/camptocamp/demo_geomapfish/dispatches
          --data '{"event_type": "geomapfish_${{ env.MAJOR_VERSION }}_updated",
            "client_payload": {"version": "'"$(scripts/get-version --upgrade-version)"'"}}'
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - name: Publish to Transifex
        run: |
          docker build --target=tools --tag=transifex --build-arg=MAJOR_VERSION=${MAJOR_VERSION} .
          docker run --name=transifex -ti --rm --detach --volume=${HOME}:/root transifex tail -f /dev/null
          summon --yaml '
            USERNAME: !var gs/ci/transifex/rw/username
            PASSWORD: !var gs/ci/transifex/rw/password
          ' bash -c 'envsubst < ci/transifexrc.tmpl > ~/.transifexrc'
          docker exec transifex bash -c \
              '(cd /opt/c2cgeoportal; make --makefile=dependencies.mk transifex-send)'
          docker stop transifex
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - name: Publish documentation to GitHub.io
        run: ci/publish-documentation
        if: >
          github.ref == format('refs/heads/{0}', env.MAIN_BRANCH)
          && github.repository == 'camptocamp/c2cgeoportal'

      - run: >
          docker run --rm --volume=/var/run/docker.sock:/var/run/docker.sock nate/dockviz
          images --tree
        if: always()
      - run: docker images
        if: always()
      - run: docker system df
        if: always()
      - run: df -h
        if: always()
