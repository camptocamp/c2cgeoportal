{
  'extends': ['config:base'],
  timezone: 'Europe/Zurich',
  schedule: 'after 5pm on the first day of the month',
  semanticCommits: 'disabled',
  labels: ['dependencies'],
  separateMajorMinor: true,
  separateMinorPatch: true,
  prHourlyLimit: 0,
  prConcurrentLimit: 0,
  lockFileMaintenance: {enabled: true, automerge: true, schedule: 'after 5pm on the first day of the month'},
  baseBranches: ['master', '2.6', '2.7', '2.8', '2.9'],
  'pre-commit': {enabled: true},
  regexManagers: [
    /** Do updates on pre-commit additional dependencies */
    {
      fileMatch: ['^\\.pre\\-commit\\-config\\.yaml$'],
      matchStrings: [" +- '?(?<depName>[^' @=]+)(@|==)(?<currentValue>[^' @=]+)'? # (?<datasource>.+)"],
    },
    {
      fileMatch: ['^ci/applications-versions.yaml$'],
      matchStrings: ['(?<depName>[^\\s]+): (?<currentValue>[^\\s]+) # (?<datasource>[^\\s]+)'],
    },
    /** Do update on the schema present in the ci/config.yaml */
    {
      fileMatch: ['^ci/config\\.yaml$'],
      matchStrings: [
        '.*https://raw\\.githubusercontent\\.com/(?<depName>[^\\s]+)/(?<currentValue>[0-9\\.]+)/.*',
      ],
      datasourceTemplate: 'github-tags',
    },
    /** Do update on the schema present in the projects ci/config.yaml */
    {
      fileMatch: ['^geoportal/c2cgeoportal_geoportal/scaffolds/*/{{cookiecutter.project}}/ci/config\\.yaml$'],
      matchStrings: [
        '.*https://raw\\.githubusercontent\\.com/(?<depName>[^\\s]+)/(?<currentValue>[0-9\\.]+)/.*',
      ],
      datasourceTemplate: 'github-tags',
    },
    /** Python version in actions/setup-python action */
    {
      fileMatch: ['^\\.github/workflows/.*\\.yaml$'],
      matchStrings: [' python-version: [\'"](?<currentValue>[0-9\\.]+)[\'"]'],
      datasourceTemplate: 'python-version',
      depNameTemplate: 'python',
    },
  ],
  packageRules: [
    /** Docker images versioning */
    {
      matchDatasources: ['docker'],
      versioning: 'loose',
    },
    {
      matchFileNames: ['docker/config/Dockerfile'],
      matchDatasources: ['docker'],
      versioning: 'ubuntu',
    },
    {
      matchDatasources: ['docker'],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)(-(?<compatibility>.*))?$',
      matchDepNames: [
        'camptocamp/mapfish_print',
        'camptocamp/tilecloud-chain',
        'camptocamp/mapserver',
        'redis',
        'haproxy',
      ],
    },
    {
      matchDatasources: ['docker'],
      versioning: 'regex:^(?<compatibility>.*)-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)?$',
      matchDepNames: ['ghcr.io/osgeo/gdal'],
    },
    /** Auto merge the dev dependency update */
    {
      matchDepTypes: ['devDependencies'],
      automerge: true,
    },
    /** Group and auto merge the patch updates */
    {
      matchUpdateTypes: ['patch'],
      groupName: 'all patch versions',
      automerge: true,
    },
    /** Group and auto merge the minor updates */
    {
      matchUpdateTypes: ['minor'],
      groupName: 'all minor versions',
      automerge: true,
    },
    /** Group Poetry packages */
    {
      matchPackagePrefixes: ['poetry-'],
      groupName: 'Poetry',
      automerge: true,
      separateMajorMinor: false,
      separateMinorPatch: false,
      matchDepNames: ['poetry', 'pip'],
    },
    /** Ungroup OWSLib */
    {
      matchDepNames: ['OWSLib'],
      groupName: 'OWSLib',
    },
    /** Ungroup Gdal */
    {
      matchDepNames: ['ghcr.io/osgeo/gdal'],
      groupName: 'Gdal',
    },
    /** Ignore geoportal/requirements.txt */
    {
      matchPaths: ['geoportal/requirements.txt'],
      enabled: false,
    },
    /** Ignore .github/workflows/rebuild-*.yaml */
    {
      matchFileNames: ['.github/workflows/rebuild-*.yaml'],
      enabled: false,
    },
    /** Accept only the patch on stabilization branches */
    {
      matchBaseBranches: ['/^[0-9]+\\.[0-9]+$/'],
      matchUpdateTypes: ['major', 'minor', 'pin', 'digest', 'lockFileMaintenance', 'rollback', 'bump'],
      enabled: false,
    },
    /** Support the 4 parts of shellcheck-py version with a v prefix */
    {
      versioning: 'regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)\\.(?<build>\\d+)$',
      matchDepNames: ['shellcheck-py/shellcheck-py'],
    },
    /** Don't update the project minimal requirements */
    {
      matchPaths: ['ci/requirements-project\\.txt'],
      enabled: false,
    },
    /**
     * No upgrade for packages sphinxcontrib-*, they requires a new major version of Sphinx
     * For 2.6
     */
    {
      matchPackagePatterns: ['^sphinxcontrib-.*'],
      matchPaths: ['doc/Pipfile'],
      enabled: false,
    },
    /** Disable upgrading the supported Python version */
    {
      matchFileNames: [
        'pyproject.toml',
        'doc/pyproject.toml',
        'docker/config/pyproject.toml',
        'docker/qgisserver/pyproject.toml',
        '.python-version',
      ],
      enabled: false,
      matchDepNames: ['python'],
    },
    /** Don't upgrade c2cciutils in tools to be able to upbrade a version <= 2.8 */
    {
      matchPaths: ['pyproject.toml'],
      enabled: false,
      matchDepNames: ['c2cciutils'],
    },
    /** Disable dpkg on master */
    {
      matchBaseBranches: ['master'],
      matchPaths: ['^ci/dpkg\\-versions\\.yaml$'],
      enabled: false,
    },
    /** Only LTS version of Node */
    {
      allowedVersions: '/(0|2|4|6|8)$/',
      enabled: false,
      matchDepNames: ['node'],
    },
    /** The version 5.4.1 of PyYAML is not working */
    {
      allowedVersions: '5.4.1',
      enabled: false,
      matchDepNames: ['PyYAML'],
    },
    /** Group and auto merge the GitHub action */
    {
      matchFileNames: ['.github/workflows/*.yaml'],
      groupName: 'github-actions',
      automerge: true,
      separateMajorMinor: false,
      separateMinorPatch: false,
    },
    /** Group and auto merge the pre-commit updates */
    {
      matchFileNames: ['.pre-commit-config.yaml'],
      groupName: 'pre-commit',
      automerge: true,
      separateMajorMinor: false,
      separateMinorPatch: false,
    },
    /** Group and auto merge the CI dependencies */
    {
      matchFileNames: ['.github/**', '.pre-commit-config.yaml', 'ci/**'],
      groupName: 'CI dependencies',
      automerge: true,
    },
    /** Group and auto merge the projects CI dependencies */
    {
      matchFileNames: [
        'geoportal/c2cgeoportal_geoportal/scaffolds/*/{{cookiecutter.project}}/.github/**',
        'geoportal/c2cgeoportal_geoportal/scaffolds/*/{{cookiecutter.project}}/.pre-commit-config.yaml',
        'geoportal/c2cgeoportal_geoportal/scaffolds/*/{{cookiecutter.project}}/ci/**',
      ],
      groupName: 'CI dependencies',
      automerge: true,
    },
    /** Daily ngeo */
    {
      schedule: 'after 5am',
      groupName: 'Ngeo',
      matchDepNames: ['ngeo'],
    },
    /** No Alabaster update on 2.7 */
    {
      matchBaseBranches: ['2.7'],
      enabled: false,
      matchDepNames: ['alabaster'],
    },
    /** No types-pyyaml from 2.8 */
    {
      matchBaseBranches: ['2.8'],
      enabled: false,
      matchDepNames: ['types-pyyaml'],
    },
    /** No update alabaster on branch 2.6 */
    {
      matchBaseBranches: ['2.6'],
      enabled: false,
      matchDepNames: ['alabaster'],
    },
    /** Packages published very recently are not pushed to stabilization branches for security reasons */
    {
      matchBaseBranches: ['/^[0-9]+\\.[0-9]+$/'],
      minimumReleaseAge: '7 days',
    },
    /** Don't update the old workflow files */
    {
      matchFileNames: [
        '.github/workflows/*-2-6.yaml',
        '.github/workflows/*-2-7.yaml',
        '.github/workflows/*-2-8.yaml',
      ],
      enabled: false,
    },
    /** Ungroup Python dependencies */
    {
      matchDepNames: ['python'],
      groupName: 'Python',
    },
    /** In file `.python-version`, use the `<major>.<minor>` version */
    {
      matchFileNames: ['.python-version'],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)$',
    },
  ],
}
