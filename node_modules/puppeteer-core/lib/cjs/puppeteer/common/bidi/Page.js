"use strict";
/**
 * Copyright 2022 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Page_instances, _Page_context, _Page_subscribedEvents, _Page_boundOnLogEntryAdded, _Page_boundOnLoaded, _Page_onLogEntryAdded, _Page_onLoad;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = void 0;
const Page_js_1 = require("../../api/Page.js");
const ConsoleMessage_js_1 = require("../ConsoleMessage.js");
const Context_js_1 = require("./Context.js");
const Serializer_js_1 = require("./Serializer.js");
/**
 * @internal
 */
class Page extends Page_js_1.Page {
    constructor(context) {
        super();
        _Page_instances.add(this);
        _Page_context.set(this, void 0);
        _Page_subscribedEvents.set(this, [
            'log.entryAdded',
            'browsingContext.load',
        ]);
        _Page_boundOnLogEntryAdded.set(this, __classPrivateFieldGet(this, _Page_instances, "m", _Page_onLogEntryAdded).bind(this));
        _Page_boundOnLoaded.set(this, __classPrivateFieldGet(this, _Page_instances, "m", _Page_onLoad).bind(this));
        __classPrivateFieldSet(this, _Page_context, context, "f");
        __classPrivateFieldGet(this, _Page_context, "f").connection.send('session.subscribe', {
            events: __classPrivateFieldGet(this, _Page_subscribedEvents, "f"),
            contexts: [__classPrivateFieldGet(this, _Page_context, "f").id],
        });
        __classPrivateFieldGet(this, _Page_context, "f").on('log.entryAdded', __classPrivateFieldGet(this, _Page_boundOnLogEntryAdded, "f"));
        __classPrivateFieldGet(this, _Page_context, "f").on('browsingContext.load', __classPrivateFieldGet(this, _Page_boundOnLoaded, "f"));
    }
    async close() {
        await __classPrivateFieldGet(this, _Page_context, "f").connection.send('session.unsubscribe', {
            events: __classPrivateFieldGet(this, _Page_subscribedEvents, "f"),
            contexts: [__classPrivateFieldGet(this, _Page_context, "f").id],
        });
        await __classPrivateFieldGet(this, _Page_context, "f").connection.send('browsingContext.close', {
            context: __classPrivateFieldGet(this, _Page_context, "f").id,
        });
        __classPrivateFieldGet(this, _Page_context, "f").off('log.entryAdded', __classPrivateFieldGet(this, _Page_boundOnLogEntryAdded, "f"));
        __classPrivateFieldGet(this, _Page_context, "f").off('browsingContext.load', __classPrivateFieldGet(this, _Page_boundOnLogEntryAdded, "f"));
    }
    async evaluateHandle(pageFunction, ...args) {
        return __classPrivateFieldGet(this, _Page_context, "f").evaluateHandle(pageFunction, ...args);
    }
    async evaluate(pageFunction, ...args) {
        return __classPrivateFieldGet(this, _Page_context, "f").evaluate(pageFunction, ...args);
    }
    async goto(url, options) {
        return __classPrivateFieldGet(this, _Page_context, "f").goto(url, options);
    }
    url() {
        return __classPrivateFieldGet(this, _Page_context, "f").url();
    }
    setDefaultNavigationTimeout(timeout) {
        __classPrivateFieldGet(this, _Page_context, "f")._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
        __classPrivateFieldGet(this, _Page_context, "f")._timeoutSettings.setDefaultTimeout(timeout);
    }
}
exports.Page = Page;
_Page_context = new WeakMap(), _Page_subscribedEvents = new WeakMap(), _Page_boundOnLogEntryAdded = new WeakMap(), _Page_boundOnLoaded = new WeakMap(), _Page_instances = new WeakSet(), _Page_onLogEntryAdded = function _Page_onLogEntryAdded(event) {
    var _a;
    if (isConsoleLogEntry(event)) {
        const args = event.args.map(arg => {
            return (0, Context_js_1.getBidiHandle)(__classPrivateFieldGet(this, _Page_context, "f"), arg);
        });
        const text = args
            .reduce((value, arg) => {
            const parsedValue = arg.isPrimitiveValue
                ? Serializer_js_1.BidiSerializer.deserialize(arg.remoteValue())
                : arg.toString();
            return `${value} ${parsedValue}`;
        }, '')
            .slice(1);
        this.emit("console" /* PageEmittedEvents.Console */, new ConsoleMessage_js_1.ConsoleMessage(event.method, text, args, getStackTraceLocations(event.stackTrace)));
    }
    else if (isJavaScriptLogEntry(event)) {
        this.emit("console" /* PageEmittedEvents.Console */, new ConsoleMessage_js_1.ConsoleMessage(event.level, (_a = event.text) !== null && _a !== void 0 ? _a : '', [], getStackTraceLocations(event.stackTrace)));
    }
}, _Page_onLoad = function _Page_onLoad(_event) {
    this.emit("load" /* PageEmittedEvents.Load */);
};
function isConsoleLogEntry(event) {
    return event.type === 'console';
}
function isJavaScriptLogEntry(event) {
    return event.type === 'javascript';
}
function getStackTraceLocations(stackTrace) {
    const stackTraceLocations = [];
    if (stackTrace) {
        for (const callFrame of stackTrace.callFrames) {
            stackTraceLocations.push({
                url: callFrame.url,
                lineNumber: callFrame.lineNumber,
                columnNumber: callFrame.columnNumber,
            });
        }
    }
    return stackTraceLocations;
}
//# sourceMappingURL=Page.js.map